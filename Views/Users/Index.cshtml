@model IEnumerable<ToolBox.Models.ViewModels.UserListItemViewModel>
@{
    ViewData["Title"] = "Users";
    Layout = "_AdminLayout";
}

<!-- Breadcrumbs -->
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-controller="Admin" asp-action="Dashboard" data-translate-key="breadcrumbs.dashboard">Tablero</a></li>
        <li class="breadcrumb-item active" aria-current="page" data-translate-key="breadcrumb_users_list">Users</li>
    </ol>
</nav>

<!-- Tarjetas de Estadísticas Superiores -->
<div class="row g-4 mb-4">
    <!-- Tarjeta de Sesión -->
    <div class="col-sm-6 col-xl-3">
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="d-flex align-items-start justify-content-between">
                    <div class="content-left">
                        <span data-translate-key="card_session_title">Session</span>
                        <div class="d-flex align-items-end mt-2">
                            <h3 class="mb-0 me-2">21,459</h3>
                            <small class="text-success">(+29%)</small>
                        </div>
                        <small data-translate-key="card_session_total_users">Total Users</small>
                    </div>
                    <span class="badge bg-primary rounded p-2">
                        <i class="fas fa-users fa-lg"></i>
                    </span>
                </div>
            </div>
        </div>
    </div>

    <!-- Tarjeta de Usuarios Activos -->
    <div class="col-sm-6 col-xl-3">
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="d-flex align-items-start justify-content-between">
                    <div class="content-left">
                        <span data-translate-key="card_active_users_title">Active Users</span>
                        <div class="d-flex align-items-end mt-2">
                            <h3 class="mb-0 me-2">19,860</h3>
                            <small class="text-success">(+18%)</small>
                        </div>
                        <small data-translate-key="card_active_users_last_week">Last week analytics</small>
                    </div>
                    <span class="badge bg-success rounded p-2">
                        <i class="fas fa-user-check fa-lg"></i>
                    </span>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Sección Principal (Contenedor tipo Card para Filtros y Tabla) -->
<div class="card shadow-sm">
    <div class="card-header border-bottom">
        <h5 class="card-title mb-0" data-translate-key="filters_title">Filters</h5>
    </div>
    <div class="card-body">
        <!-- Filtros (row con selects) -->
        <div class="row g-3 mb-4">
            <div class="col-md-4">
                <label class="form-label" for="selectRole" data-translate-key="filter_select_role">Select Role</label>
                <select id="selectRole" class="form-select filter-select">
                    <option value="" data-translate-key="all_option">All</option>
                    @if (ViewBag.AvailableRoles != null)
                    {
                        @foreach (var role in ViewBag.AvailableRoles as IEnumerable<ToolBox.Models.Role>)
                        {
                            @if (ViewBag.CurrentRoleFilter == role.Id.ToString())
                            {
                                <option value="@role.Id" selected>@role.Name</option>
                            }
                            else
                            {
                                <option value="@role.Id">@role.Name</option>
                            }
                        }
                    }
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label" for="selectStatus" data-translate-key="filter_select_status">Select Status</label>
                <select id="selectStatus" class="form-select filter-select">
                    @if (ViewBag.CurrentStatusFilter == "active")
                    {
                        <option value="active" selected data-translate-key="status_active">Active</option>
                        <option value="inactive" data-translate-key="status_inactive">Inactive</option>
                    }
                    else
                    {
                        <option value="active" data-translate-key="status_active">Active</option>
                        <option value="inactive" selected data-translate-key="status_inactive">Inactive</option>
                    }
                </select>
            </div>
        </div>
    </div>

    <!-- Divisor o directamente la tabla -->
    <hr class="m-0">

    <div class="card-datatable table-responsive pt-0">
        <div class="dataTables_wrapper dt-bootstrap5 no-footer">
            <div class="row p-3 align-items-center">
                <div class="col-sm-12 col-md-6">
                    <div class="dataTables_length" id="DataTables_Table_0_length">
                        <label>
                            <select name="DataTables_Table_0_length" aria-controls="DataTables_Table_0" class="form-select form-select-sm">
                                <option value="10">10</option>
                                <option value="25">25</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                        </label>
                    </div>
                </div>
                <div class="col-sm-12 col-md-6 d-flex justify-content-center justify-content-md-end">
                    <div id="DataTables_Table_0_filter" class="dataTables_filter">
                        <input type="search" class="form-control form-control-sm" placeholder="Search User" aria-controls="DataTables_Table_0" data-translate-placeholder-key="search_user_placeholder">
                    </div>
                    <div class="dt-buttons btn-group flex-wrap ms-2">
                        <div class="btn-group">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" tabindex="0" aria-haspopup="true" type="button" aria-expanded="false" data-bs-toggle="dropdown">
                                <i class="fas fa-share-square me-1"></i> <span data-translate-key="export_button">Export</span>
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="@Url.Action("ExportToExcel", "Users")" data-translate-key="export_to_excel"><i class="fas fa-file-excel me-1"></i> Excel</a></li>
                                <li><a class="dropdown-item" href="@Url.Action("ExportToPdf", "Users")" data-translate-key="export_to_pdf"><i class="fas fa-file-pdf me-1"></i> PDF</a></li>
                                <li><a class="dropdown-item" href="@Url.Action("ExportToCsv", "Users")" data-translate-key="export_to_csv"><i class="fas fa-file-csv me-1"></i> CSV</a></li>
                            </ul>
                        </div>
                        <button class="btn btn-sm btn-primary ms-2" type="button" data-bs-toggle="offcanvas" data-bs-target="#addUserOffcanvas" aria-controls="addUserOffcanvas">
                            <i class="fas fa-plus me-1"></i> <span data-translate-key="add_new_record_button">Add New Record</span>
                        </button>
                    </div>
                </div>
            </div>

            <table class="table table-hover dataTable no-footer dtr-column" id="usersTable">
                <thead>
                    <tr>
                        <th class="control sorting_disabled" rowspan="1" colspan="1" style="width: 0px; display: none;" aria-label=""></th>
                        <th class="sorting_disabled dt-checkboxes-cell dt-checkboxes-select-all" rowspan="1" colspan="1" style="width: 18px;" data-col="1" aria-label=""><input type="checkbox" class="form-check-input"></th>
                        <th data-translate-key="th_user_list_user">USER</th>
                        <th data-translate-key="th_user_list_role">ROLE</th>
                        <th data-translate-key="th_user_list_status">STATUS</th>
                        <th data-translate-key="th_user_list_actions">ACTIONS</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        @foreach (var user in Model)
                        {
                            <tr>
                                <td class="dt-checkboxes-cell"><input type="checkbox" class="form-check-input dt-checkboxes"></td>
                                <td>
                                    <div class="d-flex justify-content-start align-items-center user-name">
                                        <div class="avatar-wrapper me-3">
                                            <div class="avatar avatar-sm">
                                                @if (!string.IsNullOrEmpty(user.AvatarUrl))
                                                {
                                                    <img src="@user.AvatarUrl" alt="Avatar" class="rounded-circle" 
                                                         asp-append-version="true"
                                                         onerror="this.onerror=null; this.src='/img/default-avatar.png';"
                                                         style="width: 40px; height: 40px; object-fit: cover;">
                                                }
                                                else
                                                {
                                                    <img src="/img/default-avatar.png" alt="Avatar" class="rounded-circle"
                                                         style="width: 40px; height: 40px; object-fit: cover;">
                                                }
                                            </div>
                                        </div>
                                        <div class="d-flex flex-column">
                                            <a href="@Url.Action("Details", new { id = user.Id })" class="text-body text-truncate">
                                                <span class="fw-semibold">@user.FullName</span>
                                            </a>
                                            <small class="text-muted">@user.Email</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(user.RoleName))
                                    {
                                        <span class="badge rounded-pill bg-primary-subtle text-primary-emphasis px-4 py-2 d-inline-flex align-items-center" style="min-width: 120px; white-space: nowrap;">
                                            <i class="fas fa-user-tag me-2"></i>
                                            <span class="fw-medium">@user.RoleName</span>
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge rounded-pill bg-light text-muted px-4 py-2 d-inline-flex align-items-center" style="min-width: 120px; white-space: nowrap;">
                                            <i class="fas fa-user-slash me-2"></i>
                                            <span class="fw-medium">Sin rol</span>
                                        </span>
                                    }
                                </td>
                                <td>
                                    @if (user.IsActive)
                                    {
                                        <span class="badge rounded-pill bg-success text-white px-3 py-2" data-translate-key="status_active">
                                            <i class="fas fa-check-circle me-1"></i>
                                            <span class="fw-medium">Activo</span>
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge rounded-pill bg-warning text-dark px-3 py-2" data-translate-key="status_inactive">
                                            <i class="fas fa-pause-circle me-1"></i>
                                            <span class="fw-medium">Inactivo</span>
                                        </span>
                                    }
                                </td>
                                <td>
                                    <div class="d-inline-block text-nowrap">
                                        <a href="@Url.Action("Edit", new { id = user.Id })" class="btn btn-sm btn-icon" title="Editar Usuario">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        
                                        @if (user.IsActive)
                                        {
                                            <button type="button" class="btn btn-sm btn-icon text-warning toggle-status-btn" 
                                                    title="Desactivar Usuario"
                                                    data-user-id="@user.Id"
                                                    data-user-name="@user.FullName"
                                                    data-current-status="active"
                                                    data-action="deactivate">
                                                <i class="fas fa-user-slash"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <button type="button" class="btn btn-sm btn-icon text-success toggle-status-btn" 
                                                    title="Activar Usuario"
                                                    data-user-id="@user.Id"
                                                    data-user-name="@user.FullName"
                                                    data-current-status="inactive"
                                                    data-action="activate">
                                                <i class="fas fa-user-check"></i>
                                            </button>
                                        }
                                        
                                        <button class="btn btn-sm btn-icon dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                                            <i class="fas fa-ellipsis-v"></i>
                                        </button>
                                        <div class="dropdown-menu dropdown-menu-end m-0">
                                            <a href="@Url.Action("Details", new { id = user.Id })" class="dropdown-item" data-translate-key="action_view">View</a>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-center">No hay usuarios registrados</td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="row p-3 align-items-center">
                <div class="col-sm-12 col-md-5">
                    <div class="dataTables_info" id="DataTables_Table_0_info" role="status" aria-live="polite" data-translate-key="showing_entries" data-translate-values='{"start":1, "end":10, "total":50}'>
                        Showing 1 to 10 of 50 entries
                    </div>
                </div>
                <div class="col-sm-12 col-md-7">
                    <div class="dataTables_paginate paging_simple_numbers" id="DataTables_Table_0_paginate">
                        <ul class="pagination justify-content-center justify-content-md-end">
                            <li class="paginate_button page-item previous disabled"><a href="#" aria-controls="DataTables_Table_0" data-dt-idx="0" tabindex="0" class="page-link">«</a></li>
                            <li class="paginate_button page-item active"><a href="#" aria-controls="DataTables_Table_0" data-dt-idx="1" tabindex="0" class="page-link">1</a></li>
                            <li class="paginate_button page-item "><a href="#" aria-controls="DataTables_Table_0" data-dt-idx="2" tabindex="0" class="page-link">2</a></li>
                            <li class="paginate_button page-item "><a href="#" aria-controls="DataTables_Table_0" data-dt-idx="3" tabindex="0" class="page-link">3</a></li>
                            <li class="paginate_button page-item "><a href="#" aria-controls="DataTables_Table_0" data-dt-idx="4" tabindex="0" class="page-link">4</a></li>
                            <li class="paginate_button page-item "><a href="#" aria-controls="DataTables_Table_0" data-dt-idx="5" tabindex="0" class="page-link">5</a></li>
                            <li class="paginate_button page-item next"><a href="#" aria-controls="DataTables_Table_0" data-dt-idx="6" tabindex="0" class="page-link">»</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Token CSRF para peticiones AJAX -->
@Html.AntiForgeryToken()

<!-- Modal de Confirmación para Cambio de Estado -->
<div class="modal fade" id="confirmStatusModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmStatusModalTitle">
                    <i class="fas fa-exclamation-triangle text-warning me-2"></i>
                    <span data-translate-key="confirm_status_change">Confirmar Cambio de Estado</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="confirmStatusMessage"></p>
                <div class="alert alert-warning d-flex align-items-center" role="alert">
                    <i class="fas fa-info-circle me-2"></i>
                    <div id="statusChangeWarning"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-translate-key="cancel_button">Cancelar</button>
                <button type="button" class="btn btn-primary" id="confirmStatusBtn">
                    <span data-translate-key="confirm_button">Confirmar</span>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Toast para Notificaciones -->
<div class="position-fixed top-0 end-0 p-3" style="z-index: 1050">
    <div id="notificationToast" class="toast align-items-center border-0" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true" data-bs-delay="3000">
        <div class="d-flex">
            <div class="toast-body">
                <i class="fas fa-check-circle me-2" id="toastIcon"></i>
                <span id="toastMessage"></span>
            </div>
        </div>
    </div>
</div>

<!-- Incluir Offcanvas para añadir nuevos usuarios -->
@await Html.PartialAsync("_AddUserOffcanvas")

@section Scripts {
    <script src="~/js/users-script.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Manejar cambios en los filtros
            const roleFilter = document.getElementById('selectRole');
            const statusFilter = document.getElementById('selectStatus');
            const searchInput = document.querySelector('input[aria-controls="DataTables_Table_0"]');
            
            function applyFilters() {
                const params = new URLSearchParams();
                
                // Obtener valores de los filtros
                const roleValue = roleFilter.value;
                const statusValue = statusFilter.value;
                const searchValue = searchInput ? searchInput.value : '';
                
                // Agregar parámetros si tienen valor
                if (roleValue) params.append('roleFilter', roleValue);
                if (statusValue) params.append('statusFilter', statusValue);
                if (searchValue) params.append('searchTerm', searchValue);
                
                // Redirigir con los nuevos parámetros
                window.location.href = '@Url.Action("Index", "Users")' + (params.toString() ? '?' + params.toString() : '');
            }
            
            // Agregar event listeners
            if (roleFilter) {
                roleFilter.addEventListener('change', applyFilters);
            }
            
            if (statusFilter) {
                statusFilter.addEventListener('change', applyFilters);
            }
            
            // Para el campo de búsqueda, usar un timeout para evitar múltiples solicitudes
            let searchTimeout;
            if (searchInput) {
                // Establecer el valor actual de búsqueda si existe
                const currentSearchTerm = '@(ViewBag.CurrentSearchTerm ?? "")';
                if (currentSearchTerm) {
                    searchInput.value = currentSearchTerm;
                }
                
                searchInput.addEventListener('input', function() {
                    clearTimeout(searchTimeout);
                    searchTimeout = setTimeout(applyFilters, 500); // Esperar 500ms después de dejar de escribir
                });
                
                // También manejar Enter
                searchInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        clearTimeout(searchTimeout);
                        applyFilters();
                    }
                });
            }
            
            // Manejar botones de cambio de estado con delegación de eventos
            const confirmModal = new bootstrap.Modal(document.getElementById('confirmStatusModal'));
            const statusChangeForm = document.getElementById('statusChangeForm');
            
            // Variable para almacenar el botón actual
            let currentToggleButton = null;
            
            // Usar delegación de eventos para manejar botones dinámicos
            document.addEventListener('click', function(e) {
                if (e.target.closest('.toggle-status-btn')) {
                    const button = e.target.closest('.toggle-status-btn');
                    currentToggleButton = button; // Guardar referencia al botón
                    const userId = button.dataset.userId;
                    const userName = button.dataset.userName;
                    const currentStatus = button.dataset.currentStatus;
                    const action = button.dataset.action;
                    
                    // Configurar el mensaje del modal
                    const message = document.getElementById('confirmStatusMessage');
                    const warning = document.getElementById('statusChangeWarning');
                    
                    if (action === 'deactivate') {
                        message.innerHTML = `¿Está seguro de que desea <strong class="text-warning">desactivar</strong> al usuario <strong>${userName}</strong>?`;
                        warning.textContent = 'El usuario no podrá acceder al sistema hasta que sea activado nuevamente.';
                    } else {
                        message.innerHTML = `¿Está seguro de que desea <strong class="text-success">activar</strong> al usuario <strong>${userName}</strong>?`;
                        warning.textContent = 'El usuario podrá acceder al sistema con sus credenciales.';
                    }
                    
                    // Configurar el botón de confirmación con el userId
                    document.getElementById('confirmStatusBtn').dataset.userId = userId;
                    
                    // Mostrar el modal
                    confirmModal.show();
                }
            });
            
            // Manejar el clic en el botón de confirmación
            document.getElementById('confirmStatusBtn').addEventListener('click', async function() {
                const userId = this.dataset.userId;
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                try {
                    const formData = new URLSearchParams();
                    formData.append('__RequestVerificationToken', token);
                    
                    const response = await fetch(`@Url.Action("ToggleStatus", "Users")/${userId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded'
                        },
                        body: formData
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        // Obtener el filtro actual de estado
                        const currentFilter = document.getElementById('selectStatus').value;
                        const row = currentToggleButton.closest('tr');
                        
                        // Si el usuario ya no coincide con el filtro actual, remover la fila con animación
                        if ((currentFilter === 'active' && !result.newIsActiveState) || 
                            (currentFilter === 'inactive' && result.newIsActiveState)) {
                            
                            // Animar la fila antes de removerla
                            row.style.transition = 'opacity 0.3s ease-out';
                            row.style.opacity = '0';
                            
                            setTimeout(() => {
                                row.remove();
                                
                                // Verificar si ya no hay más usuarios en la tabla
                                const tbody = document.querySelector('.table tbody');
                                if (tbody.querySelectorAll('tr').length === 0) {
                                    tbody.innerHTML = '<tr><td colspan="6" class="text-center">No hay usuarios ' + 
                                                    (currentFilter === 'active' ? 'activos' : 'inactivos') + '</td></tr>';
                                }
                            }, 300);
                            
                        } else {
                            // Actualizar el botón y el badge de estado
                            const statusBadge = row.querySelector('td:nth-child(4) .badge'); // Seleccionar específicamente el badge de estado
                            
                            if (result.newIsActiveState) {
                                // El usuario ahora está activo
                                currentToggleButton.className = 'btn btn-sm btn-icon text-warning toggle-status-btn';
                                currentToggleButton.title = 'Desactivar Usuario';
                                currentToggleButton.dataset.currentStatus = 'active';
                                currentToggleButton.dataset.action = 'deactivate';
                                currentToggleButton.innerHTML = '<i class="fas fa-user-slash"></i>';
                                
                                statusBadge.className = 'badge rounded-pill bg-success text-white px-3 py-2';
                                statusBadge.innerHTML = '<i class="fas fa-check-circle me-1"></i><span class="fw-medium">Activo</span>';
                            } else {
                                // El usuario ahora está inactivo
                                currentToggleButton.className = 'btn btn-sm btn-icon text-success toggle-status-btn';
                                currentToggleButton.title = 'Activar Usuario';
                                currentToggleButton.dataset.currentStatus = 'inactive';
                                currentToggleButton.dataset.action = 'activate';
                                currentToggleButton.innerHTML = '<i class="fas fa-user-check"></i>';
                                
                                statusBadge.className = 'badge rounded-pill bg-warning text-dark px-3 py-2';
                                statusBadge.innerHTML = '<i class="fas fa-pause-circle me-1"></i><span class="fw-medium">Inactivo</span>';
                            }
                        }
                        
                        showToast(result.message, 'success');
                    } else {
                        showToast(result.message, 'error');
                    }
                    
                    // Cerrar el modal
                    confirmModal.hide();
                    
                } catch (error) {
                    showToast('Error al cambiar el estado del usuario', 'error');
                    confirmModal.hide();
                }
            });
            
            // Función para mostrar notificaciones toast
            function showToast(message, type = 'success') {
                const toastElement = document.getElementById('notificationToast');
                const toastIcon = document.getElementById('toastIcon');
                const toastMessage = document.getElementById('toastMessage');
                
                // Configurar el ícono y estilo según el tipo
                if (type === 'success') {
                    toastIcon.className = 'fas fa-check-circle text-white me-2';
                    toastElement.className = 'toast align-items-center border-0 bg-success text-white';
                } else if (type === 'error') {
                    toastIcon.className = 'fas fa-times-circle text-white me-2';
                    toastElement.className = 'toast align-items-center border-0 bg-danger text-white';
                }
                
                toastMessage.textContent = message;
                
                const toast = new bootstrap.Toast(toastElement, {
                    autohide: true,
                    delay: 3000
                });
                toast.show();
            }
            
            // Función para actualizar enlaces de exportación con filtros actuales
            function updateExportLinks() {
                const params = new URLSearchParams();
                
                // Obtener valores de los filtros
                const roleValue = roleFilter ? roleFilter.value : '';
                const statusValue = statusFilter ? statusFilter.value : '';
                const searchValue = searchInput ? searchInput.value : '';
                
                // Agregar parámetros si tienen valor
                if (roleValue) params.append('roleFilter', roleValue);
                if (statusValue) params.append('statusFilter', statusValue);
                if (searchValue) params.append('searchTerm', searchValue);
                
                const queryString = params.toString();
                const suffix = queryString ? '?' + queryString : '';
                
                // Actualizar enlaces de exportación
                const excelLink = document.querySelector('a[href*="ExportToExcel"]');
                const pdfLink = document.querySelector('a[href*="ExportToPdf"]');
                const csvLink = document.querySelector('a[href*="ExportToCsv"]');
                
                if (excelLink) {
                    excelLink.href = '@Url.Action("ExportToExcel", "Users")' + suffix;
                }
                if (pdfLink) {
                    pdfLink.href = '@Url.Action("ExportToPdf", "Users")' + suffix;
                }
                if (csvLink) {
                    csvLink.href = '@Url.Action("ExportToCsv", "Users")' + suffix;
                }
            }
            
            // Actualizar enlaces de exportación al cambiar filtros
            if (roleFilter) {
                roleFilter.addEventListener('change', updateExportLinks);
            }
            if (statusFilter) {
                statusFilter.addEventListener('change', updateExportLinks);
            }
            if (searchInput) {
                searchInput.addEventListener('input', function() {
                    clearTimeout(searchTimeout);
                    searchTimeout = setTimeout(updateExportLinks, 500);
                });
            }
            
            // Inicializar enlaces de exportación con filtros actuales
            updateExportLinks();
            
            // Manejar mensajes de éxito/error de TempData
            @if (!string.IsNullOrEmpty(TempData["SuccessMessage"]?.ToString()))
            {
                <text>
                showToast('@Html.Raw(TempData["SuccessMessage"])', 'success');
                </text>
            }
            
            @if (!string.IsNullOrEmpty(TempData["ErrorMessage"]?.ToString()))
            {
                <text>
                showToast('@Html.Raw(TempData["ErrorMessage"])', 'error');
                </text>
            }
        });
    </script>
}