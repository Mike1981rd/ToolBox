@model ToolBox.Models.WheelOfLifePageViewModel
@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <style>
        /* Wheel of Life Custom Styles */
        .wheel-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
            border-radius: 0 0 16px 16px;
        }

        .chart-container {
            background: white;
            border-radius: 16px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            border: 1px solid #f0f0f0;
            padding: 2rem;
            margin-bottom: 2rem;
            position: relative;
        }

        .chart-wrapper {
            position: relative;
            height: 400px;
            width: 100%;
        }

        .scores-panel {
            background: white;
            border-radius: 16px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            border: 1px solid #f0f0f0;
            margin-bottom: 2rem;
        }

        .scores-panel-header {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 1.5rem;
            border-bottom: 1px solid #e9ecef;
            border-radius: 16px 16px 0 0;
        }

        .scores-panel-body {
            padding: 2rem;
        }

        .total-score-display {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 12px;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        .total-score-number {
            font-size: 2.5rem;
            font-weight: 700;
            display: block;
            margin-bottom: 0.5rem;
        }

        .total-score-label {
            font-size: 1rem;
            opacity: 0.9;
        }

        .area-card {
            background: white;
            border-radius: 12px;
            padding: 1.25rem;
            margin-bottom: 1rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.06);
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }

        .area-card:hover {
            border-color: #667eea;
            box-shadow: 0 4px 16px rgba(102, 126, 234, 0.15);
        }

        .area-card-content {
            display: flex;
            align-items: flex-start;
            gap: 1rem;
        }

        .area-icon {
            font-size: 1.5rem;
            width: 45px;
            height: 45px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            flex-shrink: 0;
            box-shadow: 0 3px 10px rgba(0,0,0,0.2);
        }

        .area-info {
            flex: 1;
            min-width: 0;
        }

        .area-name {
            font-weight: 700;
            color: #2d3748;
            margin-bottom: 0.5rem;
            font-size: 1rem;
        }

        .area-description {
            font-size: 0.85rem;
            color: #718096;
            line-height: 1.4;
            margin: 0;
        }

        .score-selector {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.5rem;
            min-width: 90px;
        }

        .current-score {
            font-size: 1.5rem;
            font-weight: 700;
            color: #667eea;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 35px;
            height: 35px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-radius: 50%;
            margin-bottom: 0.25rem;
        }

        .score-input {
            width: 70px;
            font-size: 0.9rem;
            font-weight: 600;
            text-align: center;
            border-radius: 6px;
            border: 2px solid #e9ecef;
            padding: 0.4rem 0.2rem;
            transition: all 0.3s ease;
        }

        .score-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

        .score-label {
            font-size: 0.75rem;
            color: #9ca3af;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-weight: 600;
        }

        .save-section {
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 2px solid #f0f0f0;
        }

        .save-btn {
            background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
            color: white;
            border: none;
            padding: 0.875rem 2rem;
            border-radius: 50px;
            font-weight: 600;
            font-size: 1rem;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(72, 187, 120, 0.3);
            width: 100%;
        }

        .save-btn:hover {
            background: linear-gradient(135deg, #38a169 0%, #2f855a 100%);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(72, 187, 120, 0.4);
        }

        .save-btn:disabled {
            background: #e9ecef;
            color: #6c757d;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .stats-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .stat-item {
            text-align: center;
            padding: 1rem;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 12px;
            border: 1px solid #e9ecef;
        }

        .stat-number {
            font-size: 1.5rem;
            font-weight: 700;
            color: #667eea;
            display: block;
        }

        .stat-label {
            font-size: 0.75rem;
            color: #718096;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .chart-wrapper {
            position: relative;
            height: 450px;
            width: 100%;
            padding: 1rem;
        }

        #wheelOfLifeChart {
            max-width: 100%;
            max-height: 100%;
            image-rendering: -moz-crisp-edges;
            image-rendering: -webkit-crisp-edges;
            image-rendering: pixelated;
            image-rendering: crisp-edges;
            transform: translateZ(0);
            backface-visibility: hidden;
            perspective: 1000;
        }

        .chart-title {
            text-align: center;
            margin-bottom: 1.5rem;
            color: #2d3748;
            font-weight: 600;
        }

        .loading-spinner {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 10;
        }

        .success-message, .error-message {
            margin-top: 1rem;
            padding: 1rem;
            border-radius: 12px;
            text-align: center;
        }

        .success-message {
            background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
            color: white;
        }

        .error-message {
            background: linear-gradient(135deg, #f56565 0%, #e53e3e 100%);
            color: white;
        }

        @@media (max-width: 768px) {
            .chart-wrapper {
                height: 350px;
                padding: 0.5rem;
            }

            .total-score-number {
                font-size: 2rem;
            }

            .area-card-content {
                flex-direction: column;
                text-align: center;
                gap: 1rem;
            }

            .area-info {
                text-align: center;
            }

            .score-selector {
                flex-direction: row;
                justify-content: center;
                align-items: center;
                gap: 1rem;
            }

            .stats-row {
                grid-template-columns: 1fr;
            }
        }
    </style>
}

<!-- Page Header -->
<div class="wheel-header">
    <div class="container">
        <h1 class="h2 mb-0" data-translate-key="page_titles.wheelOfLife">Rueda de la Vida</h1>
        <p class="mb-0 mt-2 opacity-90" data-translate-key="wheelOfLife.subtitle">Visualiza y equilibra las diferentes Ã¡reas de tu vida</p>
    </div>
</div>

<div class="container">
    <!-- Breadcrumbs -->
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb bg-transparent p-0">
            <li class="breadcrumb-item">
                <a asp-controller="Admin" asp-action="Dashboard" data-translate-key="breadcrumbs.dashboard">Dashboard</a>
            </li>
            <li class="breadcrumb-item active" aria-current="page" data-translate-key="breadcrumbs.wheelOfLife">Wheel of Life</li>
        </ol>
    </nav>

    <div class="row">
        <!-- Chart Column -->
        <div class="col-lg-8">
            <div class="chart-container">
                <h3 class="chart-title" data-translate-key="wheelOfLife.chartTitle">
                    <i class="fas fa-chart-pie me-2"></i>
                    Tu Rueda de Equilibrio de Vida
                </h3>
                <div class="chart-wrapper">
                    <canvas id="wheelOfLifeChart" width="400" height="400"></canvas>
                    <div id="chartLoading" class="loading-spinner d-none">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading chart...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Scores Panel Column -->
        <div class="col-lg-4">
            <div class="scores-panel">
                <div class="scores-panel-header">
                    <h3 class="h5 mb-0" data-translate-key="labels.selectYourScore">
                        <i class="fas fa-sliders-h me-2"></i>
                        Select your score below:
                    </h3>
                </div>
                <div class="scores-panel-body">
                    <!-- Total Score Display -->
                    <div class="total-score-display">
                        <span id="totalScoreNumber" class="total-score-number">@Model.TotalScore</span>
                        <div class="total-score-label" data-translate-key="labels.totalScore">
                            Total Score / @Model.MaxPossibleScore
                        </div>
                    </div>

                    <!-- Statistics Row -->
                    <div class="stats-row">
                        <div class="stat-item">
                            <span id="averageScore" class="stat-number">@Model.AverageScore</span>
                            <span class="stat-label" data-translate-key="labels.average">Promedio</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-number">@Model.LifeAreas.Count</span>
                            <span class="stat-label" data-translate-key="labels.areas">Ãreas</span>
                        </div>
                    </div>

                    <!-- Life Areas Scores -->
                    <div id="scoresContainer">
                        @foreach (var area in Model.LifeAreas.OrderBy(a => a.OrderIndex))
                        {
                            <div class="area-card" data-area-id="@area.AreaId">
                                <div class="area-card-content">
                                    <div class="area-icon" style="background-color: @area.AreaColor;">
                                        @area.AreaIcon
                                    </div>
                                    <div class="area-info">
                                        <div class="area-name" data-translate-key="areas.@area.AreaSlug">@area.AreaName</div>
                                        <p class="area-description" data-translate-key="areas.@(area.AreaSlug).description">@area.AreaDescription</p>
                                    </div>
                                    <div class="score-selector">
                                        <div class="current-score" id="currentScore_@area.AreaId">@area.CurrentScore</div>
                                        <select class="form-select score-input" 
                                                data-area-id="@area.AreaId" 
                                                data-area-name="@area.AreaName"
                                                data-area-color="@area.AreaColor">
                                            @for (int i = 1; i <= 10; i++)
                                            {
                                                @if (i == area.CurrentScore)
                                                {
                                                    <option value="@i" selected>@i</option>
                                                }
                                                else
                                                {
                                                    <option value="@i">@i</option>
                                                }
                                            }
                                        </select>
                                        <span class="score-label" data-translate-key="labels.score">PuntuaciÃ³n</span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Save Section -->
                    <div class="save-section">
                        <button id="saveScoresBtn" class="save-btn" data-translate-key="buttons.saveScores">
                            <i class="fas fa-save me-2"></i>Save Scores
                        </button>
                        <div id="saveMessage"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <script>
        // Wheel of Life JavaScript
        const WheelOfLife = {
            config: {
                chart: null,
                baseUrl: '/WheelOfLife',
                currentData: @Html.Raw(Json.Serialize(Model.LifeAreas)),
                isLoading: false
            },

            // Initialize the module
            init: function() {
                console.log('Initializing Wheel of Life module...');
                this.initializeChart();
                this.bindEvents();
                this.updateTotalScore();
            },

            // Initialize Chart.js polar area chart
            initializeChart: function() {
                const canvas = document.getElementById('wheelOfLifeChart');
                const ctx = canvas.getContext('2d');
                
                // Advanced canvas optimization for crisp rendering
                const dpr = window.devicePixelRatio || 1;
                const rect = canvas.getBoundingClientRect();
                
                canvas.width = rect.width * dpr;
                canvas.height = rect.height * dpr;
                ctx.scale(dpr, dpr);
                
                canvas.style.width = rect.width + 'px';
                canvas.style.height = rect.height + 'px';
                
                // Get current language for translations
                const currentLang = localStorage.getItem('selectedLanguage') || 'es';
                const isSpanish = currentLang === 'es';
                
                // Prepare chart data with translations
                const labels = this.config.currentData.map(area => {
                    if (isSpanish && window.translations && window.translations.es) {
                        const translatedName = window.translations.es[`areas.${area.areaSlug}`];
                        return translatedName || area.areaName;
                    }
                    return area.areaName;
                });
                
                const data = this.config.currentData.map(area => area.currentScore);
                const backgroundColors = this.config.currentData.map(area => this.hexToRgba(area.areaColor, 0.8));
                const borderColors = this.config.currentData.map(area => area.areaColor);

                this.config.chart = new Chart(ctx, {
                    type: 'polarArea',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: isSpanish ? 'PuntuaciÃ³n de Ãreas de Vida' : 'Life Areas Score',
                            data: data,
                            backgroundColor: backgroundColors,
                            borderColor: borderColors,
                            borderWidth: 3,
                            borderAlign: 'inner'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        devicePixelRatio: dpr,
                        plugins: {
                            legend: {
                                display: true,
                                position: 'bottom',
                                labels: {
                                    font: {
                                        size: Math.round(12 * dpr) / dpr,
                                        weight: '600'
                                    },
                                    color: '#2d3748',
                                    padding: 15,
                                    usePointStyle: true,
                                    pointStyle: 'circle'
                                }
                            },
                            tooltip: {
                                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                titleColor: '#fff',
                                bodyColor: '#fff',
                                borderColor: '#667eea',
                                borderWidth: 1,
                                cornerRadius: 8,
                                displayColors: true,
                                callbacks: {
                                    title: function(context) {
                                        return context[0].label;
                                    },
                                    label: function(context) {
                                        const scoreLabel = isSpanish ? 'PuntuaciÃ³n' : 'Score';
                                        return `${scoreLabel}: ${context.parsed}/10`;
                                    }
                                }
                            }
                        },
                        scales: {
                            r: {
                                beginAtZero: true,
                                min: 0,
                                max: 10,
                                stepSize: 1,
                                ticks: {
                                    font: {
                                        size: Math.round(11 * dpr) / dpr,
                                        weight: '600'
                                    },
                                    color: '#718096',
                                    backdropColor: 'rgba(255, 255, 255, 0.9)',
                                    backdropPadding: 3,
                                    showLabelBackdrop: true
                                },
                                grid: {
                                    color: '#e2e8f0',
                                    lineWidth: 1
                                },
                                angleLines: {
                                    color: '#e2e8f0',
                                    lineWidth: 1
                                }
                            }
                        },
                        animation: {
                            duration: 1000,
                            easing: 'easeInOutQuart'
                        },
                        interaction: {
                            intersect: false,
                            mode: 'nearest'
                        }
                    }
                });
                
                // Force chart to be crisp by setting canvas size properly
                setTimeout(() => {
                    if (this.config.chart) {
                        this.config.chart.resize();
                    }
                }, 100);
            },

            // Bind all event handlers
            bindEvents: function() {
                // Score select change events
                $(document).on('change', '.score-input', (e) => {
                    const areaId = parseInt($(e.target).data('area-id'));
                    const newScore = parseInt($(e.target).val());
                    const areaName = $(e.target).data('area-name');
                    
                    // Update the visual score display
                    $(`#currentScore_${areaId}`).text(newScore);
                    
                    this.updateAreaScore(areaId, newScore);
                    this.updateChart();
                    this.updateTotalScore();
                    
                    console.log(`Updated ${areaName}: ${newScore}`);
                });

                // Save scores button
                $('#saveScoresBtn').on('click', (e) => {
                    e.preventDefault();
                    this.saveScores();
                });

                // Window resize handler for chart responsiveness
                $(window).on('resize', this.debounce(() => {
                    if (this.config.chart) {
                        this.config.chart.resize();
                    }
                }, 300));
            },

            // Update area score in current data
            updateAreaScore: function(areaId, newScore) {
                const area = this.config.currentData.find(a => a.areaId === areaId);
                if (area) {
                    area.currentScore = newScore;
                }
            },

            // Update the chart with new data
            updateChart: function() {
                if (!this.config.chart) return;

                // Get current language for translations
                const currentLang = localStorage.getItem('selectedLanguage') || 'es';
                const isSpanish = currentLang === 'es';
                
                // Update labels with translations
                const labels = this.config.currentData.map(area => {
                    if (isSpanish && window.translations && window.translations.es) {
                        const translatedName = window.translations.es[`areas.${area.areaSlug}`];
                        return translatedName || area.areaName;
                    }
                    return area.areaName;
                });

                const newData = this.config.currentData.map(area => area.currentScore);
                
                // Update chart data
                this.config.chart.data.labels = labels;
                this.config.chart.data.datasets[0].data = newData;
                this.config.chart.data.datasets[0].label = isSpanish ? 'PuntuaciÃ³n de Ãreas de Vida' : 'Life Areas Score';
                
                this.config.chart.update('none');
            },

            // Update total score display
            updateTotalScore: function() {
                const totalScore = this.config.currentData.reduce((sum, area) => sum + area.currentScore, 0);
                const averageScore = (totalScore / this.config.currentData.length).toFixed(1);
                
                $('#totalScoreNumber').text(totalScore);
                $('#averageScore').text(averageScore);
            },

            // Save scores to server
            saveScores: function() {
                if (this.config.isLoading) return;

                this.config.isLoading = true;
                const $btn = $('#saveScoresBtn');
                const originalText = $btn.html();
                
                $btn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Saving...');

                const scores = this.config.currentData.map(area => ({
                    areaId: area.areaId,
                    areaName: area.areaName,
                    areaSlug: area.areaSlug,
                    areaIcon: area.areaIcon,
                    areaColor: area.areaColor,
                    areaDescription: area.areaDescription,
                    currentScore: area.currentScore,
                    orderIndex: area.orderIndex
                }));

                $.ajax({
                    url: `${this.config.baseUrl}/SaveWheelScores`,
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ scores: scores }),
                    success: (response) => {
                        if (response.success) {
                            this.showMessage('success', response.message, response);
                        } else {
                            this.showMessage('error', response.message || 'Error saving scores');
                        }
                    },
                    error: () => {
                        this.showMessage('error', 'Network error. Please check your connection and try again.');
                    },
                    complete: () => {
                        this.config.isLoading = false;
                        $btn.prop('disabled', false).html(originalText);
                    }
                });
            },

            // Show success/error message
            showMessage: function(type, message, data = null) {
                const className = type === 'success' ? 'success-message' : 'error-message';
                const icon = type === 'success' ? 'fas fa-check-circle' : 'fas fa-exclamation-triangle';
                
                let extraInfo = '';
                if (type === 'success' && data) {
                    extraInfo = `
                        <div style="margin-top: 0.5rem; font-size: 0.9rem;">
                            Total Score: ${data.totalScore} | Average: ${data.averageScore}
                        </div>
                    `;
                }

                const messageHtml = `
                    <div class="${className}">
                        <i class="${icon} me-2"></i>${message}${extraInfo}
                    </div>
                `;
                
                $('#saveMessage').html(messageHtml);
                
                // Auto remove after 4 seconds
                setTimeout(() => {
                    $('#saveMessage').fadeOut(300, function() {
                        $(this).empty().show();
                    });
                }, 4000);
            },

            // Utility functions
            hexToRgba: function(hex, opacity) {
                if (!hex || !hex.startsWith('#')) return `rgba(102, 126, 234, ${opacity})`;
                
                const r = parseInt(hex.slice(1, 3), 16);
                const g = parseInt(hex.slice(3, 5), 16);
                const b = parseInt(hex.slice(5, 7), 16);
                
                return `rgba(${r}, ${g}, ${b}, ${opacity})`;
            },

            debounce: function(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func.apply(this, args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }
        };

        // Initialize when document is ready
        $(document).ready(function() {
            WheelOfLife.init();
        });
    </script>
}