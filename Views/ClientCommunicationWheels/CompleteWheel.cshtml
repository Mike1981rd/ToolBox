@model ToolBox.Models.ViewModels.CompleteWheelViewModel
@{
    ViewData["Title"] = Model.IsCompleted ? "Ver Rueda de Comunicación" : "Completar Rueda de Comunicación";
    ViewBag.HideTitleInLayout = true;
}

<style>
    /* Custom slider styles to ensure visibility */
    .form-range.score-slider {
        width: 100%;
        height: 6px;
        padding: 0;
        background-color: transparent;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        border: none;
        cursor: pointer;
    }

    /* Webkit browsers (Chrome, Safari, Edge) */
    .form-range.score-slider::-webkit-slider-runnable-track {
        width: 100%;
        height: 6px;
        cursor: pointer;
        background: #dee2e6;
        border-radius: 3px;
        border: 0;
    }

    .form-range.score-slider::-webkit-slider-thumb {
        height: 20px;
        width: 20px;
        border-radius: 50%;
        background: #0d6efd;
        cursor: pointer;
        -webkit-appearance: none;
        margin-top: -7px;
        box-shadow: 0 0 2px rgba(0,0,0,0.2);
    }

    /* Firefox */
    .form-range.score-slider::-moz-range-track {
        width: 100%;
        height: 6px;
        cursor: pointer;
        background: #dee2e6;
        border-radius: 3px;
        border: 0;
    }

    .form-range.score-slider::-moz-range-thumb {
        height: 20px;
        width: 20px;
        border-radius: 50%;
        background: #0d6efd;
        cursor: pointer;
        border: 0;
        box-shadow: 0 0 2px rgba(0,0,0,0.2);
    }

    /* Focus styles */
    .form-range.score-slider:focus {
        outline: none;
    }

    .form-range.score-slider:focus::-webkit-slider-thumb {
        box-shadow: 0 0 0 4px rgba(13, 110, 253, 0.25);
    }

    .form-range.score-slider:focus::-moz-range-thumb {
        box-shadow: 0 0 0 4px rgba(13, 110, 253, 0.25);
    }

    .score-display {
        font-size: 1.2rem;
        min-width: 2rem;
    }

    .score-slider-container {
        position: relative;
        padding: 0 5px;
        margin-bottom: 1rem;
    }

    .dimension-number {
        font-size: 0.875rem;
        font-weight: normal;
        opacity: 0.7;
    }
</style>

<div class="container-fluid">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-2">
                    <li class="breadcrumb-item">
                        <a asp-action="Index" data-translate-key="client_communication_wheels_title">
                            Mis Ruedas de Comunicación
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        <span data-translate-key="client_wheel_complete">Completar Evaluación</span>
                    </li>
                </ol>
            </nav>
            <h1 class="h3 mb-2">@Model.WheelTemplateName</h1>
            @if (!string.IsNullOrEmpty(Model.WheelTemplateDescription))
            {
                <p class="text-muted">@Model.WheelTemplateDescription</p>
            }
        </div>
    </div>

    <form asp-action="SubmitWheel" method="post" id="wheelForm">
        @Html.HiddenFor(m => m.InstanceId)
        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

        <div class="row">
            <!-- Dimensions Form -->
            <div class="col-lg-7">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0" data-translate-key="client_wheel_evaluate_dimensions">
                            Evalúa cada dimensión de comunicación
                        </h5>
                        <small class="text-muted" data-translate-key="client_wheel_score_scale">
                            Usa una escala del 1 al 10, donde 1 es muy bajo y 10 es excelente
                        </small>
                    </div>
                    <div class="card-body">
                        @for (int i = 0; i < Model.DimensionsToScore.Count; i++)
                        {
                            var dimension = Model.DimensionsToScore[i];
                            <div class="dimension-item mb-4 pb-4 @(i < Model.DimensionsToScore.Count - 1 ? "border-bottom" : "")">
                                @Html.HiddenFor(m => m.DimensionsToScore[i].DimensionId)
                                @Html.HiddenFor(m => m.DimensionsToScore[i].DimensionName)
                                @Html.HiddenFor(m => m.DimensionsToScore[i].GuidingQuestion)
                                @Html.HiddenFor(m => m.DimensionsToScore[i].Order)
                                
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <h6 class="mb-0">
                                        <span class="dimension-number text-muted me-2">@dimension.Order.</span>
                                        @dimension.DimensionName
                                    </h6>
                                    <span class="score-display badge bg-info" id="score-display-@i">
                                        @Model.DimensionsToScore[i].Score
                                    </span>
                                </div>
                                
                                @if (!string.IsNullOrEmpty(dimension.GuidingQuestion))
                                {
                                    <p class="text-muted small mb-3">
                                        <i class="fas fa-question-circle me-1"></i>
                                        @dimension.GuidingQuestion
                                    </p>
                                }
                                
                                <div class="score-slider-container">
                                    <div class="d-flex justify-content-between mb-1">
                                        <small class="text-muted">1</small>
                                        <small class="text-muted">2</small>
                                        <small class="text-muted">3</small>
                                        <small class="text-muted">4</small>
                                        <small class="text-muted">5</small>
                                        <small class="text-muted">6</small>
                                        <small class="text-muted">7</small>
                                        <small class="text-muted">8</small>
                                        <small class="text-muted">9</small>
                                        <small class="text-muted">10</small>
                                    </div>
                                    <input type="range" 
                                           asp-for="@Model.DimensionsToScore[i].Score" 
                                           class="form-range score-slider" 
                                           min="1" max="10" step="1"
                                           data-index="@i"
                                           id="score-@i">
                                    <span asp-validation-for="@Model.DimensionsToScore[i].Score" class="text-danger"></span>
                                </div>
                            </div>
                        }
                        
                        <!-- Client Notes -->
                        <div class="mt-4">
                            <label asp-for="ClientNotes" class="form-label">
                                <i class="fas fa-comment-dots me-1"></i>
                                <span data-translate-key="client_wheel_notes">Notas/Reflexiones (Opcional)</span>
                            </label>
                            <textarea asp-for="ClientNotes" class="form-control" rows="4"
                                      placeholder="Comparte tus reflexiones sobre esta evaluación..."
                                      data-translate-placeholder="client_wheel_notes_placeholder"></textarea>
                        </div>
                    </div>
                </div>
                
                <!-- Submit Buttons -->
                <div class="d-flex justify-content-between">
                    <a asp-action="Index" class="btn btn-secondary">
                        <i class="fas fa-arrow-left me-2"></i>
                        <span data-translate-key="button_back">Volver</span>
                    </a>
                    <button type="submit" class="btn btn-primary btn-lg" id="submitBtn">
                        <i class="fas fa-check-circle me-2"></i>
                        <span data-translate-key="client_wheel_submit">Finalizar y Ver mi Rueda</span>
                    </button>
                </div>
            </div>

            <!-- Live Preview -->
            <div class="col-lg-5">
                <div class="card sticky-top" style="top: 20px;">
                    <div class="card-header">
                        <h5 class="card-title mb-0" data-translate-key="client_wheel_preview">
                            Vista Previa de tu Rueda
                        </h5>
                    </div>
                    <div class="card-body">
                        <canvas id="previewChart" width="400" height="400"></canvas>
                        
                        <div class="alert alert-info mt-3">
                            <i class="fas fa-info-circle me-2"></i>
                            <small data-translate-key="client_wheel_preview_info">
                                Esta vista previa se actualiza automáticamente mientras ajustas tus puntuaciones
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get dimension data from the model
            const dimensions = @Html.Raw(Json.Serialize(Model.DimensionsToScore.Select(d => new { 
                name = d.DimensionName, 
                score = d.Score 
            })));
            
            // Generate colors for pie chart
            const colors = [
                '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',
                '#FF9F40', '#FF6384', '#C9CBCF', '#4BC0C0', '#FF6384',
                '#36A2EB', '#FFCE56'
            ];
            
            // Initialize chart
            const ctx = document.getElementById('previewChart').getContext('2d');
            const previewChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: dimensions.map(d => d.name),
                    datasets: [{
                        label: 'Puntuación',
                        data: dimensions.map(d => d.score),
                        backgroundColor: colors.slice(0, dimensions.length),
                        borderColor: '#fff',
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'right',
                            labels: {
                                boxWidth: 20,
                                padding: 15,
                                font: {
                                    size: 12
                                },
                                generateLabels: function(chart) {
                                    const data = chart.data;
                                    if (data.labels.length && data.datasets.length) {
                                        return data.labels.map((label, i) => {
                                            const value = data.datasets[0].data[i];
                                            return {
                                                text: `${label}: ${value}/10`,
                                                fillStyle: data.datasets[0].backgroundColor[i],
                                                strokeStyle: data.datasets[0].borderColor,
                                                lineWidth: data.datasets[0].borderWidth,
                                                hidden: false,
                                                index: i
                                            };
                                        });
                                    }
                                    return [];
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.parsed;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = ((value / total) * 100).toFixed(1);
                                    return `${label}: ${value}/10 (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
            
            // Update chart when sliders change
            const sliders = document.querySelectorAll('.score-slider');
            console.log('Found sliders:', sliders.length);
            
            sliders.forEach((slider, idx) => {
                // Log initial state
                console.log(`Slider ${idx}: initial value=${slider.value}, min=${slider.min}, max=${slider.max}, disabled=${slider.disabled}`);
                
                // Add both input and change events for better compatibility
                slider.addEventListener('input', function(e) {
                    const index = parseInt(this.dataset.index);
                    const value = parseInt(this.value);
                    
                    console.log(`Slider ${index} changed to ${value}`);
                    
                    // Update display
                    document.getElementById('score-display-' + index).textContent = value;
                    
                    // Update chart
                    previewChart.data.datasets[0].data[index] = value;
                    // Update legend to show new value
                    previewChart.options.plugins.legend.labels.generateLabels = function(chart) {
                        const data = chart.data;
                        if (data.labels.length && data.datasets.length) {
                            return data.labels.map((label, i) => {
                                const value = data.datasets[0].data[i];
                                return {
                                    text: `${label}: ${value}/10`,
                                    fillStyle: data.datasets[0].backgroundColor[i],
                                    strokeStyle: data.datasets[0].borderColor,
                                    lineWidth: data.datasets[0].borderWidth,
                                    hidden: false,
                                    index: i
                                };
                            });
                        }
                        return [];
                    };
                    previewChart.update('none'); // 'none' for instant update
                });
                
                // Also add change event as backup
                slider.addEventListener('change', function(e) {
                    const index = parseInt(this.dataset.index);
                    const value = parseInt(this.value);
                    console.log(`Slider ${index} change event: ${value}`);
                });
            });
            
            // Form submission
            document.getElementById('wheelForm').addEventListener('submit', function(e) {
                // Validate all dimensions have been scored
                let allScored = true;
                sliders.forEach(slider => {
                    if (parseInt(slider.value) < 1 || parseInt(slider.value) > 10) {
                        allScored = false;
                    }
                });
                
                if (!allScored) {
                    e.preventDefault();
                    alert('Por favor evalúa todas las dimensiones antes de enviar.');
                    return false;
                }
                
                // Disable submit button
                const submitBtn = document.getElementById('submitBtn');
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Guardando...';
            });
        });
    </script>
    
    <style>
        .dimension-item {
            transition: all 0.3s ease;
        }
        
        .dimension-item:hover {
            background-color: var(--bs-light);
            padding: 1rem;
            margin: -1rem;
            border-radius: 0.5rem;
        }
        
        .score-display {
            font-size: 1.2rem;
            min-width: 40px;
            text-align: center;
        }
        
        .form-range {
            height: 8px;
        }
        
        .form-range::-webkit-slider-thumb {
            width: 20px;
            height: 20px;
        }
    </style>
}