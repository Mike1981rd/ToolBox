@model ToolBox.Models.ViewModels.ViewWheelViewModel
@{
    ViewData["Title"] = "Mi Rueda de Comunicación";
    ViewBag.HideTitleInLayout = true;
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-2">
                    <li class="breadcrumb-item">
                        <a asp-action="Index" data-translate-key="client_communication_wheels_title">
                            Mis Ruedas de Comunicación
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        <span data-translate-key="client_wheel_view_result">Ver Resultado</span>
                    </li>
                </ol>
            </nav>
            <div class="d-flex justify-content-between align-items-start">
                <div>
                    <h1 class="h3 mb-2">@Model.WheelTemplateName</h1>
                    @if (!string.IsNullOrEmpty(Model.WheelTemplateDescription))
                    {
                        <p class="text-muted mb-0">@Model.WheelTemplateDescription</p>
                    }
                </div>
                <button class="btn btn-primary d-print-none" onclick="window.print()">
                    <i class="fas fa-print me-2"></i>
                    <span data-translate-key="button_print">Imprimir</span>
                </button>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Radar Chart -->
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0" data-translate-key="client_wheel_your_result">
                        Tu Rueda de Comunicación
                    </h5>
                    <small class="text-muted">
                        <i class="fas fa-calendar-check me-1"></i>
                        <span data-translate-key="client_wheel_completed_on">Completada el</span>
                        @Model.CompletedAt.ToString("dd 'de' MMMM 'de' yyyy 'a las' HH:mm")
                    </small>
                </div>
                <div class="card-body">
                    <div class="chart-container" style="position: relative; height: 500px;">
                        <canvas id="wheelChart"></canvas>
                    </div>
                    
                    <!-- The legend is now integrated in the pie chart -->
                    <div class="mt-3 text-center">
                        <small class="text-muted">
                            <i class="fas fa-info-circle me-1"></i>
                            <span data-translate-key="client_wheel_pie_chart_info">
                                La leyenda muestra las dimensiones con sus puntuaciones
                            </span>
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Details and Notes -->
        <div class="col-lg-4">
            <!-- Summary Stats -->
            <div class="card mb-3">
                <div class="card-header">
                    <h6 class="card-title mb-0" data-translate-key="client_wheel_summary">
                        Resumen
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-6">
                            <h4 class="text-primary mb-1">@Model.DimensionScores.Average().ToString("F1")</h4>
                            <small class="text-muted" data-translate-key="client_wheel_avg_score">Promedio</small>
                        </div>
                        <div class="col-6">
                            <h4 class="text-success mb-1">@Model.DimensionScores.Max()</h4>
                            <small class="text-muted" data-translate-key="client_wheel_max_score">Máximo</small>
                        </div>
                    </div>
                    <hr>
                    <div class="row text-center">
                        <div class="col-6">
                            <h4 class="text-warning mb-1">@Model.DimensionScores.Min()</h4>
                            <small class="text-muted" data-translate-key="client_wheel_min_score">Mínimo</small>
                        </div>
                        <div class="col-6">
                            <h4 class="text-info mb-1">@Model.DimensionLabels.Count</h4>
                            <small class="text-muted" data-translate-key="client_wheel_dimensions_count">Dimensiones</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Client Notes -->
            @if (!string.IsNullOrEmpty(Model.ClientNotes))
            {
                <div class="card mb-3">
                    <div class="card-header">
                        <h6 class="card-title mb-0">
                            <i class="fas fa-comment-dots me-1"></i>
                            <span data-translate-key="client_wheel_my_notes">Mis Notas</span>
                        </h6>
                    </div>
                    <div class="card-body">
                        <p class="mb-0">@Model.ClientNotes</p>
                    </div>
                </div>
            }

            <!-- Assignment Info -->
            <div class="card">
                <div class="card-header">
                    <h6 class="card-title mb-0" data-translate-key="client_wheel_assignment_info">
                        Información de Asignación
                    </h6>
                </div>
                <div class="card-body">
                    <div class="mb-2">
                        <small class="text-muted d-block" data-translate-key="client_wheel_assigned_by">Asignado por:</small>
                        <span>@Model.AssignedByCoachName</span>
                    </div>
                    <div>
                        <small class="text-muted d-block" data-translate-key="client_wheel_assigned_date">Fecha de asignación:</small>
                        <span>@Model.AssignedAt.ToString("dd/MM/yyyy")</span>
                    </div>
                </div>
            </div>

            <!-- Actions -->
            <div class="mt-3 d-print-none">
                <a asp-action="Index" class="btn btn-secondary w-100">
                    <i class="fas fa-arrow-left me-2"></i>
                    <span data-translate-key="button_back_to_list">Volver a la Lista</span>
                </a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get data from the model
            const labels = @Html.Raw(Json.Serialize(Model.DimensionLabels));
            const scores = @Html.Raw(Json.Serialize(Model.DimensionScores));
            
            // Generate colors for each dimension
            const backgroundColors = [
                'rgba(255, 99, 132, 0.8)',
                'rgba(54, 162, 235, 0.8)',
                'rgba(255, 206, 86, 0.8)',
                'rgba(75, 192, 192, 0.8)',
                'rgba(153, 102, 255, 0.8)',
                'rgba(255, 159, 64, 0.8)',
                'rgba(199, 199, 199, 0.8)',
                'rgba(83, 102, 255, 0.8)',
                'rgba(255, 99, 255, 0.8)',
                'rgba(99, 255, 132, 0.8)'
            ];
            
            const borderColors = backgroundColors.map(color => color.replace('0.8', '1'));
            
            // Create the pie chart
            const ctx = document.getElementById('wheelChart').getContext('2d');
            const wheelChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels.map((label, index) => `${index + 1}. ${label}`),
                    datasets: [{
                        data: scores,
                        backgroundColor: backgroundColors.slice(0, labels.length),
                        borderColor: borderColors.slice(0, labels.length),
                        borderWidth: 2,
                        hoverOffset: 10
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    devicePixelRatio: window.devicePixelRatio || 2, // For crisp graphics
                    plugins: {
                        legend: {
                            display: true,
                            position: 'bottom',
                            labels: {
                                padding: 15,
                                usePointStyle: true,
                                font: {
                                    family: 'Inter, system-ui, -apple-system, sans-serif',
                                    size: 12,
                                    weight: '500'
                                },
                                generateLabels: function(chart) {
                                    const data = chart.data;
                                    if (data.labels.length && data.datasets.length) {
                                        return data.labels.map((label, i) => {
                                            const dataset = data.datasets[0];
                                            const value = dataset.data[i];
                                            return {
                                                text: `${label}: ${value}/10`,
                                                fillStyle: dataset.backgroundColor[i],
                                                strokeStyle: dataset.borderColor[i],
                                                lineWidth: dataset.borderWidth,
                                                hidden: false,
                                                index: i
                                            };
                                        });
                                    }
                                    return [];
                                }
                            }
                        },
                        title: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.parsed;
                                    const percentage = ((value / scores.reduce((a, b) => a + b, 0)) * 100).toFixed(1);
                                    return [`${label}`, `Puntuación: ${value}/10`, `Porcentaje: ${percentage}%`];
                                },
                                title: function() {
                                    return '';
                                }
                            },
                            displayColors: true,
                            bodySpacing: 4,
                            padding: 12,
                            bodyFont: {
                                family: 'Inter, system-ui, -apple-system, sans-serif',
                                size: 13
                            }
                        }
                    }
                }
            });
        });
    </script>
    
    <style>
        @@media print {
            .breadcrumb,
            .btn,
            .d-print-none {
                display: none !important;
            }
            
            .card {
                border: 1px solid #dee2e6 !important;
                box-shadow: none !important;
            }
            
            .chart-container {
                page-break-inside: avoid;
            }
        }
        
        .chart-container {
            background: white;
            padding: 20px;
            border-radius: 8px;
        }
        
        .chart-container canvas {
            image-rendering: -webkit-optimize-contrast;
            image-rendering: crisp-edges;
            image-rendering: pixelated;
        }
    </style>
}