@model ToolBox.Models.ViewModels.CommunicationWheelTemplateViewModel
@{
    ViewData["Title"] = "Editar Plantilla de Rueda de Comunicación";
    ViewBag.HideTitleInLayout = true;
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-2">
                    <li class="breadcrumb-item">
                        <a asp-action="Index" data-translate-key="communication_wheel_templates_title">
                            Plantillas de Rueda de Comunicación
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page" data-translate-key="communication_wheel_edit_template">
                        Editar Plantilla
                    </li>
                </ol>
            </nav>
            <h1 class="h3 mb-0">@Model.Name</h1>
        </div>
    </div>

    <div class="row">
        <!-- Template Details -->
        <div class="col-lg-4">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0" data-translate-key="communication_wheel_template_details">
                        Detalles de la Plantilla
                    </h5>
                </div>
                <div class="card-body">
                    <form asp-action="Edit" method="post">
                        @Html.HiddenFor(m => m.Id)
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>
                        
                        <div class="mb-3">
                            <label asp-for="Name" class="form-label">
                                <span data-translate-key="communication_wheel_template_name">Nombre</span>
                                <span class="text-danger">*</span>
                            </label>
                            <input asp-for="Name" class="form-control" />
                            <span asp-validation-for="Name" class="text-danger"></span>
                        </div>
                        
                        <div class="mb-3">
                            <label asp-for="Description" class="form-label" data-translate-key="communication_wheel_template_description">
                                Descripción
                            </label>
                            <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>
                        
                        <div class="d-flex justify-content-between">
                            <a asp-action="Index" class="btn btn-secondary btn-sm">
                                <i class="fas fa-arrow-left me-1"></i>
                                <span data-translate-key="button_back">Volver</span>
                            </a>
                            <button type="submit" class="btn btn-primary btn-sm">
                                <i class="fas fa-save me-1"></i>
                                <span data-translate-key="button_save">Guardar</span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Dimensions Management -->
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0" data-translate-key="communication_wheel_dimensions_title">
                            Dimensiones de Comunicación
                        </h5>
                        <button type="button" class="btn btn-primary btn-sm" onclick="showAddDimensionModal()">
                            <i class="fas fa-plus me-1"></i>
                            <span data-translate-key="communication_wheel_add_dimension">Agregar Dimensión</span>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @if (Model.Dimensions.Any())
                    {
                        <div class="alert alert-info mb-3">
                            <i class="fas fa-info-circle me-2"></i>
                            <span data-translate-key="communication_wheel_dimensions_info">
                                Arrastra las dimensiones para reordenarlas. El orden afecta cómo se muestran en el gráfico.
                            </span>
                        </div>
                        
                        <div id="dimensionsList" class="list-group">
                            @foreach (var dimension in Model.Dimensions.OrderBy(d => d.Order))
                            {
                                <div class="list-group-item dimension-item" data-dimension-id="@dimension.Id">
                                    <div class="d-flex align-items-start">
                                        <div class="drag-handle me-3" style="cursor: move;">
                                            <i class="fas fa-grip-vertical text-muted"></i>
                                        </div>
                                        <div class="flex-grow-1">
                                            <h6 class="mb-1">
                                                <span class="badge bg-light text-muted me-2" style="font-size: 0.7rem; padding: 0.2rem 0.4rem;">@dimension.Order</span>
                                                <span class="dimension-name">@dimension.Name</span>
                                            </h6>
                                            @if (!string.IsNullOrEmpty(dimension.GuidingQuestion))
                                            {
                                                <p class="mb-0 text-muted small dimension-question">
                                                    <i class="fas fa-question-circle me-1"></i>
                                                    @dimension.GuidingQuestion
                                                </p>
                                            }
                                        </div>
                                        <div class="ms-2">
                                            <button type="button" class="btn btn-sm btn-icon me-1 btn-edit-dimension"
                                                    data-dimension-id="@dimension.Id"
                                                    data-dimension-name="@dimension.Name"
                                                    data-dimension-question="@(dimension.GuidingQuestion ?? "")"
                                                    title="Editar dimensión">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-icon text-danger btn-delete-dimension"
                                                    data-dimension-id="@dimension.Id"
                                                    data-dimension-name="@dimension.Name"
                                                    title="Eliminar dimensión">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-layer-group fa-3x text-muted mb-3"></i>
                            <p class="text-muted" data-translate-key="communication_wheel_no_dimensions">
                                Esta plantilla aún no tiene dimensiones definidas.
                            </p>
                            <button type="button" class="btn btn-primary" onclick="showAddDimensionModal()">
                                <i class="fas fa-plus me-2"></i>
                                <span data-translate-key="communication_wheel_add_first_dimension">Agregar Primera Dimensión</span>
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Dimension Modal -->
<div class="modal fade" id="dimensionModal" tabindex="-1" aria-labelledby="dimensionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="dimensionModalLabel">
                    <span data-translate-key="communication_wheel_dimension_modal_title">Dimensión de Comunicación</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="dimensionForm">
                    <input type="hidden" id="dimensionId" value="0" />
                    
                    <div class="mb-3">
                        <label for="dimensionName" class="form-label">
                            <span data-translate-key="communication_wheel_dimension_name">Nombre de la Dimensión</span>
                            <span class="text-danger">*</span>
                        </label>
                        <input type="text" class="form-control" id="dimensionName" required
                               placeholder="Ej: Escucha Activa"
                               data-translate-placeholder="communication_wheel_dimension_name_placeholder" />
                        <div class="invalid-feedback" data-translate-key="communication_wheel_dimension_name_required">
                            El nombre es requerido
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="guidingQuestion" class="form-label" data-translate-key="communication_wheel_guiding_question">
                            Pregunta Guía (Opcional)
                        </label>
                        <textarea class="form-control" id="guidingQuestion" rows="3"
                                  placeholder="Ej: ¿Presto atención completa y comprendo lo que otros dicen?"
                                  data-translate-placeholder="communication_wheel_guiding_question_placeholder"></textarea>
                        <small class="form-text text-muted" data-translate-key="communication_wheel_guiding_question_help">
                            Esta pregunta ayudará al cliente a reflexionar sobre esta dimensión
                        </small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <span data-translate-key="button_cancel">Cancelar</span>
                </button>
                <button type="button" class="btn btn-primary" onclick="saveDimension()">
                    <i class="fas fa-save me-1"></i>
                    <span data-translate-key="button_save">Guardar</span>
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <!-- SortableJS for drag and drop -->
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    
    <script>
        const templateId = @Model.Id;
        let dimensionModal;
        let sortable;
        
        document.addEventListener('DOMContentLoaded', function() {
            dimensionModal = new bootstrap.Modal(document.getElementById('dimensionModal'));
            
            // Initialize sortable if there are dimensions
            const dimensionsList = document.getElementById('dimensionsList');
            if (dimensionsList) {
                sortable = Sortable.create(dimensionsList, {
                    handle: '.drag-handle',
                    animation: 150,
                    onEnd: function(evt) {
                        reorderDimensions();
                    }
                });
            }
            
            // Add event listeners for edit and delete dimension buttons
            document.addEventListener('click', function(e) {
                // Edit dimension button
                if (e.target.closest('.btn-edit-dimension')) {
                    const button = e.target.closest('.btn-edit-dimension');
                    const dimensionId = button.getAttribute('data-dimension-id');
                    const dimensionName = button.getAttribute('data-dimension-name');
                    const dimensionQuestion = button.getAttribute('data-dimension-question') || '';
                    
                    editDimension(dimensionId, dimensionName, dimensionQuestion);
                }
                
                // Delete dimension button
                if (e.target.closest('.btn-delete-dimension')) {
                    const button = e.target.closest('.btn-delete-dimension');
                    const dimensionId = button.getAttribute('data-dimension-id');
                    const dimensionName = button.getAttribute('data-dimension-name');
                    
                    deleteDimension(dimensionId, dimensionName);
                }
            });
        });
        
        function showAddDimensionModal() {
            document.getElementById('dimensionModalLabel').textContent = 'Nueva Dimensión';
            document.getElementById('dimensionId').value = '0';
            document.getElementById('dimensionName').value = '';
            document.getElementById('guidingQuestion').value = '';
            dimensionModal.show();
        }
        
        function editDimension(id, name, guidingQuestion) {
            document.getElementById('dimensionModalLabel').textContent = 'Editar Dimensión';
            document.getElementById('dimensionId').value = id;
            document.getElementById('dimensionName').value = name;
            document.getElementById('guidingQuestion').value = guidingQuestion;
            dimensionModal.show();
        }
        
        function saveDimension() {
            const form = document.getElementById('dimensionForm');
            if (!form.checkValidity()) {
                form.classList.add('was-validated');
                return;
            }
            
            const dimensionId = document.getElementById('dimensionId').value;
            const dimensionData = {
                name: document.getElementById('dimensionName').value,
                guidingQuestion: document.getElementById('guidingQuestion').value
            };
            
            const isEdit = dimensionId !== '0';
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            const requestData = isEdit 
                ? {
                    dimensionId: parseInt(dimensionId),
                    name: dimensionData.name,
                    guidingQuestion: dimensionData.guidingQuestion || ''
                }
                : {
                    templateId: templateId,
                    name: dimensionData.name,
                    guidingQuestion: dimensionData.guidingQuestion || ''
                };
            
            const url = isEdit 
                ? `/CommunicationWheelTemplates/UpdateDimension`
                : `/CommunicationWheelTemplates/CreateDimension`;
            
            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify(requestData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    dimensionModal.hide();
                    location.reload(); // Reload to show updated dimensions
                } else {
                    alert(data.error || 'Error al guardar la dimensión');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error al guardar la dimensión');
            });
        }
        
        function deleteDimension(id, name) {
            if (!confirm(`¿Estás seguro de eliminar la dimensión "${name}"?`)) {
                return;
            }
            
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            fetch(`/CommunicationWheelTemplates/DeleteDimension`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ dimensionId: parseInt(id) })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error al eliminar la dimensión');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error al eliminar la dimensión');
            });
        }
        
        function reorderDimensions() {
            const dimensionIds = Array.from(document.querySelectorAll('.dimension-item'))
                .map(item => parseInt(item.dataset.dimensionId));
            
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            fetch(`/CommunicationWheelTemplates/ReorderDimensions`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({
                    templateId: templateId,
                    dimensionIds: dimensionIds
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update order badges
                    document.querySelectorAll('.dimension-item').forEach((item, index) => {
                        const badge = item.querySelector('.badge');
                        if (badge) {
                            badge.textContent = (index + 1).toString();
                        }
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error al reordenar las dimensiones');
            });
        }
    </script>
}