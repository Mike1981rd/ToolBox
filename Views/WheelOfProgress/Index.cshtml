@model ToolBox.Models.WheelOfProgressPageViewModel
@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <style>
        /* Wheel of Progress Custom Styles */
        .progress-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
            border-radius: 0 0 16px 16px;
        }

        .chart-container {
            background: white;
            border-radius: 16px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            border: 1px solid #f0f0f0;
            padding: 2rem;
            margin-bottom: 2rem;
            position: relative;
            height: fit-content;
        }

        .chart-wrapper {
            position: relative;
            height: 400px;
            width: 100%;
            padding: 1rem;
        }

        #progressWheelChart {
            max-width: 100%;
            max-height: 100%;
            image-rendering: -moz-crisp-edges;
            image-rendering: -webkit-crisp-edges;
            image-rendering: pixelated;
            image-rendering: crisp-edges;
            transform: translateZ(0);
            backface-visibility: hidden;
            perspective: 1000;
        }

        .global-progress-overlay {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 50%;
            width: 120px;
            height: 120px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            border: 3px solid #667eea;
        }

        .global-progress-number {
            font-size: 2rem;
            font-weight: 700;
            color: #667eea;
            line-height: 1;
        }

        .global-progress-label {
            font-size: 0.75rem;
            color: #718096;
            font-weight: 600;
            margin-top: 0.25rem;
        }

        .progress-table-container {
            background: white;
            border-radius: 16px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            border: 1px solid #f0f0f0;
            margin-bottom: 2rem;
            overflow: hidden;
        }

        .progress-table-header {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 1.5rem;
            border-bottom: 1px solid #e9ecef;
        }

        .progress-table {
            margin: 0;
            font-size: 0.9rem;
        }

        .progress-table th {
            background: #f8f9fa;
            border: none;
            font-weight: 600;
            color: #495057;
            padding: 1rem 0.75rem;
            font-size: 0.8rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .progress-table td {
            padding: 1rem 0.75rem;
            border-top: 1px solid #e9ecef;
            vertical-align: middle;
        }

        .area-cell {
            font-weight: 600;
            color: white;
            text-align: center;
            border-radius: 8px;
            margin: 0.25rem;
            padding: 1rem 0.5rem !important;
            vertical-align: middle;
            position: relative;
        }

        .category-cell {
            background: #f8f9fa;
            border-radius: 6px;
            margin: 0.25rem;
            padding: 0.75rem !important;
            font-weight: 500;
            color: #495057;
        }

        .input-progress {
            border: 2px solid #e9ecef;
            border-radius: 6px;
            padding: 0.5rem;
            font-size: 0.85rem;
            transition: all 0.3s ease;
            width: 100%;
        }

        .input-progress:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
            outline: none;
        }

        .progress-input {
            width: 80px;
            text-align: center;
            font-weight: 600;
        }

        .deadline-input {
            min-width: 140px;
        }

        .save-section {
            padding: 2rem;
            border-top: 2px solid #f0f0f0;
            background: #f8f9fa;
        }

        .save-btn {
            background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
            color: white;
            border: none;
            padding: 0.875rem 2rem;
            border-radius: 50px;
            font-weight: 600;
            font-size: 1rem;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(72, 187, 120, 0.3);
        }

        .save-btn:hover {
            background: linear-gradient(135deg, #38a169 0%, #2f855a 100%);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(72, 187, 120, 0.4);
        }

        .save-btn:disabled {
            background: #e9ecef;
            color: #6c757d;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .stats-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.06);
            border: 1px solid #f0f0f0;
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            color: #667eea;
            display: block;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            font-size: 0.875rem;
            color: #718096;
            font-weight: 500;
        }

        .loading-spinner {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 10;
        }

        .success-message, .error-message {
            margin-top: 1rem;
            padding: 1rem;
            border-radius: 12px;
            text-align: center;
        }

        .success-message {
            background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
            color: white;
        }

        .error-message {
            background: linear-gradient(135deg, #f56565 0%, #e53e3e 100%);
            color: white;
        }

        .flatpickr-input {
            background: white !important;
            cursor: pointer;
        }

        @@media (max-width: 768px) {
            .chart-wrapper {
                height: 300px;
                padding: 0.5rem;
            }

            .global-progress-overlay {
                width: 80px;
                height: 80px;
            }

            .global-progress-number {
                font-size: 1.5rem;
            }

            .progress-table-container {
                overflow-x: auto;
            }

            .progress-table {
                min-width: 800px;
            }

            .stats-cards {
                grid-template-columns: 1fr 1fr;
            }
        }

        @@media (max-width: 576px) {
            .stats-cards {
                grid-template-columns: 1fr;
            }
        }
    </style>
}

<!-- Page Header -->
<div class="progress-header">
    <div class="container">
        <h1 class="h2 mb-0" data-translate-key="page_titles.wheelOfProgress">Rueda del Progreso</h1>
        <p class="mb-0 mt-2 opacity-90" data-translate-key="wheelOfProgress.subtitle">Establece metas, registra tu progreso y planifica tus siguientes acciones</p>
    </div>
</div>

<div class="container">
    <!-- Breadcrumbs -->
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb bg-transparent p-0">
            <li class="breadcrumb-item">
                <a asp-controller="Admin" asp-action="Dashboard" data-translate-key="breadcrumbs.dashboard">Dashboard</a>
            </li>
            <li class="breadcrumb-item active" aria-current="page" data-translate-key="breadcrumbs.wheelOfProgress">Rueda del Progreso</li>
        </ol>
    </nav>

    <!-- Statistics Cards -->
    <div class="stats-cards">
        <div class="stat-card">
            <span class="stat-number">@((int)Model.GlobalProgressPercentage)%</span>
            <span class="stat-label" data-translate-key="wheelOfProgress.globalProgress">Progreso Global</span>
        </div>
        <div class="stat-card">
            <span class="stat-number">@Model.TotalCategories</span>
            <span class="stat-label" data-translate-key="wheelOfProgress.totalCategories">Total Categorías</span>
        </div>
        <div class="stat-card">
            <span class="stat-number">@Model.CategoriesWithGoals</span>
            <span class="stat-label" data-translate-key="wheelOfProgress.categoriesWithGoals">Con Metas</span>
        </div>
        <div class="stat-card">
            <span class="stat-number">@Model.LastUpdated.ToString("MMM dd")</span>
            <span class="stat-label" data-translate-key="wheelOfProgress.lastUpdated">Última Actualización</span>
        </div>
    </div>

    <div class="row">
        <!-- Chart Column -->
        <div class="col-md-5">
            <div class="chart-container">
                <h3 class="text-center mb-4" data-translate-key="wheelOfProgress.chartTitle">
                    <i class="fas fa-chart-pie me-2"></i>
                    Tu Rueda del Progreso
                </h3>
                <div class="chart-wrapper">
                    <canvas id="progressWheelChart" width="400" height="400"></canvas>
                    <div class="global-progress-overlay">
                        <div id="globalProgressNumber" class="global-progress-number">@((int)Model.GlobalProgressPercentage)%</div>
                        <div class="global-progress-label" data-translate-key="wheelOfProgress.globalLabel">Global</div>
                    </div>
                    <div id="chartLoading" class="loading-spinner d-none">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading chart...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Progress Table Column -->
        <div class="col-md-7">
            <div class="progress-table-container">
                <div class="progress-table-header">
                    <h3 class="h5 mb-0" data-translate-key="wheelOfProgress.progressTableTitle">
                        <i class="fas fa-tasks me-2"></i>
                        Gestión de Metas y Progreso
                    </h3>
                </div>
                
                <div class="table-responsive">
                    <table class="table progress-table">
                        <thead>
                            <tr>
                                <th data-translate-key="table_headers.area">Área</th>
                                <th data-translate-key="table_headers.categories">Categorías</th>
                                <th data-translate-key="table_headers.goal">Meta</th>
                                <th data-translate-key="table_headers.percentage">%</th>
                                <th data-translate-key="table_headers.nextAction">Siguiente Acción</th>
                                <th data-translate-key="table_headers.deadline">Fecha Límite</th>
                            </tr>
                        </thead>
                        <tbody id="progressTableBody">
                            @foreach (var area in Model.LifeAreas.OrderBy(a => a.OrderIndex))
                            {
                                var areaRowspan = area.Categories.Count;
                                for (int i = 0; i < area.Categories.Count; i++)
                                {
                                    var category = area.Categories.OrderBy(c => c.OrderIndex).ElementAt(i);
                                    <tr data-area-id="@area.AreaId" data-category-id="@category.CategoryId">
                                        @if (i == 0)
                                        {
                                            <td class="area-cell" rowspan="@areaRowspan" style="background-color: @area.AreaColor;">
                                                <div>
                                                    @area.AreaIcon<br>
                                                    <small data-translate-key="areas.@area.AreaSlug">@area.AreaName</small>
                                                </div>
                                            </td>
                                        }
                                        <td class="category-cell" style="background-color: @category.CategoryColor;">
                                            <span data-translate-key="categories.@category.CategorySlug">@category.CategoryName</span>
                                        </td>
                                        <td>
                                            <input type="text" 
                                                   class="form-control input-progress goal-input" 
                                                   data-category-id="@category.CategoryId"
                                                   value="@category.GoalText"
                                                   placeholder="Define tu meta..."
                                                   maxlength="500">
                                        </td>
                                        <td>
                                            <input type="number" 
                                                   class="form-control input-progress progress-input" 
                                                   data-category-id="@category.CategoryId"
                                                   value="@category.ProgressPercentage"
                                                   min="0" 
                                                   max="100"
                                                   placeholder="0">
                                        </td>
                                        <td>
                                            <input type="text" 
                                                   class="form-control input-progress action-input" 
                                                   data-category-id="@category.CategoryId"
                                                   value="@category.NextActionText"
                                                   placeholder="Próxima acción..."
                                                   maxlength="500">
                                        </td>
                                        <td>
                                            <input type="text" 
                                                   class="form-control input-progress deadline-input flatpickr-input" 
                                                   data-category-id="@category.CategoryId"
                                                   value="@(category.DeadlineDate?.ToString("yyyy-MM-dd") ?? "")"
                                                   placeholder="Seleccionar fecha..."
                                                   readonly>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Save Section -->
                <div class="save-section">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>
                                <span data-translate-key="wheelOfProgress.autoSaveNote">Los cambios se guardan automáticamente</span>
                            </small>
                        </div>
                        <button id="saveProgressBtn" class="save-btn" data-translate-key="buttons.saveProgress">
                            <i class="fas fa-save me-2"></i>Guardar Progreso
                        </button>
                    </div>
                    <div id="saveMessage"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <!-- Flatpickr for date picking -->
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    
    <script>
        // Wheel of Progress JavaScript
        const WheelOfProgress = {
            config: {
                chart: null,
                baseUrl: '/WheelOfProgress',
                currentData: @Html.Raw(Json.Serialize(Model.LifeAreas)),
                isLoading: false,
                datepickers: []
            },

            // Initialize the module
            init: function() {
                console.log('Initializing Wheel of Progress module...');
                this.initializeChart();
                this.initializeDatepickers();
                this.bindEvents();
                this.updateGlobalProgress();
            },

            // Initialize Chart.js polar area chart
            initializeChart: function() {
                const canvas = document.getElementById('progressWheelChart');
                const ctx = canvas.getContext('2d');
                
                // Advanced canvas optimization for crisp rendering
                const dpr = window.devicePixelRatio || 1;
                const rect = canvas.getBoundingClientRect();
                
                canvas.width = rect.width * dpr;
                canvas.height = rect.height * dpr;
                ctx.scale(dpr, dpr);
                
                canvas.style.width = rect.width + 'px';
                canvas.style.height = rect.height + 'px';
                
                // Get current language for translations
                const currentLang = localStorage.getItem('selectedLanguage') || 'es';
                const isSpanish = currentLang === 'es';
                
                // Prepare chart data with translations
                const labels = this.config.currentData.map(area => {
                    if (isSpanish && window.translations && window.translations.es) {
                        const translatedName = window.translations.es[`areas.${area.areaSlug}`];
                        return translatedName || area.areaName;
                    }
                    return area.areaName;
                });
                
                const data = this.config.currentData.map(area => area.areaScore);
                const backgroundColors = this.config.currentData.map(area => this.hexToRgba(area.areaColor, 0.8));
                const borderColors = this.config.currentData.map(area => area.areaColor);

                this.config.chart = new Chart(ctx, {
                    type: 'polarArea',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: isSpanish ? 'Puntuación de Áreas de Vida' : 'Life Areas Score',
                            data: data,
                            backgroundColor: backgroundColors,
                            borderColor: borderColors,
                            borderWidth: 3,
                            borderAlign: 'inner'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        devicePixelRatio: dpr,
                        plugins: {
                            legend: {
                                display: true,
                                position: 'bottom',
                                labels: {
                                    font: {
                                        size: Math.round(11 * dpr) / dpr,
                                        weight: '600'
                                    },
                                    color: '#2d3748',
                                    padding: 12,
                                    usePointStyle: true,
                                    pointStyle: 'circle'
                                }
                            },
                            tooltip: {
                                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                titleColor: '#fff',
                                bodyColor: '#fff',
                                borderColor: '#667eea',
                                borderWidth: 1,
                                cornerRadius: 8,
                                displayColors: true,
                                callbacks: {
                                    title: function(context) {
                                        return context[0].label;
                                    },
                                    label: function(context) {
                                        const scoreLabel = isSpanish ? 'Puntuación' : 'Score';
                                        return `${scoreLabel}: ${context.parsed}/10`;
                                    }
                                }
                            }
                        },
                        scales: {
                            r: {
                                beginAtZero: true,
                                min: 0,
                                max: 10,
                                stepSize: 1,
                                ticks: {
                                    font: {
                                        size: Math.round(10 * dpr) / dpr,
                                        weight: '600'
                                    },
                                    color: '#718096',
                                    backdropColor: 'rgba(255, 255, 255, 0.9)',
                                    backdropPadding: 3,
                                    showLabelBackdrop: true
                                },
                                grid: {
                                    color: '#e2e8f0',
                                    lineWidth: 1
                                },
                                angleLines: {
                                    color: '#e2e8f0',
                                    lineWidth: 1
                                }
                            }
                        },
                        animation: {
                            duration: 1000,
                            easing: 'easeInOutQuart'
                        },
                        interaction: {
                            intersect: false,
                            mode: 'nearest'
                        }
                    }
                });
                
                // Force chart to be crisp by setting canvas size properly
                setTimeout(() => {
                    if (this.config.chart) {
                        this.config.chart.resize();
                    }
                }, 100);
            },

            // Initialize Flatpickr date pickers
            initializeDatepickers: function() {
                const dateInputs = document.querySelectorAll('.deadline-input');
                
                dateInputs.forEach(input => {
                    const flatpickrInstance = flatpickr(input, {
                        dateFormat: "Y-m-d",
                        allowInput: true,
                        locale: localStorage.getItem('selectedLanguage') === 'es' ? 'es' : 'en',
                        minDate: "today",
                        onChange: (selectedDates, dateStr) => {
                            this.updateGlobalProgress();
                        }
                    });
                    
                    this.config.datepickers.push(flatpickrInstance);
                });
            },

            // Bind all event handlers
            bindEvents: function() {
                // Progress percentage input change events
                $(document).on('input change', '.progress-input', (e) => {
                    const value = parseInt($(e.target).val()) || 0;
                    if (value < 0) $(e.target).val(0);
                    if (value > 100) $(e.target).val(100);
                    
                    this.updateGlobalProgress();
                });

                // Save progress button
                $('#saveProgressBtn').on('click', (e) => {
                    e.preventDefault();
                    this.saveProgress();
                });

                // Auto-save on input changes (debounced)
                let autoSaveTimeout;
                $(document).on('input', '.input-progress', () => {
                    clearTimeout(autoSaveTimeout);
                    autoSaveTimeout = setTimeout(() => {
                        this.saveProgress(true); // Silent save
                    }, 2000);
                });

                // Window resize handler for chart responsiveness
                $(window).on('resize', this.debounce(() => {
                    if (this.config.chart) {
                        this.config.chart.resize();
                    }
                }, 300));
            },

            // Update global progress percentage
            updateGlobalProgress: function() {
                const progressInputs = $('.progress-input');
                let total = 0;
                let count = 0;

                progressInputs.each(function() {
                    const value = parseInt($(this).val()) || 0;
                    total += value;
                    count++;
                });

                const globalProgress = count > 0 ? Math.round(total / count) : 0;
                
                $('#globalProgressNumber').text(globalProgress + '%');
                
                // Update stats card
                $('.stat-number').first().text(globalProgress + '%');
            },

            // Save progress to server
            saveProgress: function(silent = false) {
                if (this.config.isLoading) return;

                this.config.isLoading = true;
                const $btn = $('#saveProgressBtn');
                const originalText = $btn.html();
                
                if (!silent) {
                    $btn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Guardando...');
                }

                // Collect all progress data from the table
                const progressData = [];
                
                $('#progressTableBody tr').each(function() {
                    const $row = $(this);
                    const categoryId = parseInt($row.data('category-id'));
                    const areaId = parseInt($row.data('area-id'));
                    
                    const goalText = $row.find('.goal-input').val() || '';
                    const progressPercentage = parseInt($row.find('.progress-input').val()) || 0;
                    const nextActionText = $row.find('.action-input').val() || '';
                    const deadlineDate = $row.find('.deadline-input').val() || null;
                    
                    progressData.push({
                        categoryId: categoryId,
                        areaId: areaId,
                        goalText: goalText,
                        progressPercentage: progressPercentage,
                        nextActionText: nextActionText,
                        deadlineDate: deadlineDate
                    });
                });

                $.ajax({
                    url: `${this.config.baseUrl}/SaveProgressData`,
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(progressData),
                    success: (response) => {
                        if (response.success) {
                            if (!silent) {
                                this.showMessage('success', response.message, response);
                            }
                            // Update global progress display
                            if (response.newGlobalProgressPercentage !== undefined) {
                                $('#globalProgressNumber').text(response.newGlobalProgressPercentage + '%');
                            }
                        } else {
                            this.showMessage('error', response.message || 'Error saving progress');
                        }
                    },
                    error: () => {
                        if (!silent) {
                            this.showMessage('error', 'Network error. Please check your connection and try again.');
                        }
                    },
                    complete: () => {
                        this.config.isLoading = false;
                        if (!silent) {
                            $btn.prop('disabled', false).html(originalText);
                        }
                    }
                });
            },

            // Show success/error message
            showMessage: function(type, message, data = null) {
                const className = type === 'success' ? 'success-message' : 'error-message';
                const icon = type === 'success' ? 'fas fa-check-circle' : 'fas fa-exclamation-triangle';
                
                let extraInfo = '';
                if (type === 'success' && data) {
                    extraInfo = `
                        <div style="margin-top: 0.5rem; font-size: 0.9rem;">
                            Categorías actualizadas: ${data.totalCategoriesUpdated} | Progreso global: ${data.newGlobalProgressPercentage}%
                        </div>
                    `;
                }

                const messageHtml = `
                    <div class="${className}">
                        <i class="${icon} me-2"></i>${message}${extraInfo}
                    </div>
                `;
                
                $('#saveMessage').html(messageHtml);
                
                // Auto remove after 4 seconds
                setTimeout(() => {
                    $('#saveMessage').fadeOut(300, function() {
                        $(this).empty().show();
                    });
                }, 4000);
            },

            // Utility functions
            hexToRgba: function(hex, opacity) {
                if (!hex || !hex.startsWith('#')) return `rgba(102, 126, 234, ${opacity})`;
                
                const r = parseInt(hex.slice(1, 3), 16);
                const g = parseInt(hex.slice(3, 5), 16);
                const b = parseInt(hex.slice(5, 7), 16);
                
                return `rgba(${r}, ${g}, ${b}, ${opacity})`;
            },

            debounce: function(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func.apply(this, args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }
        };

        // Initialize when document is ready
        $(document).ready(function() {
            WheelOfProgress.init();
        });
    </script>
}