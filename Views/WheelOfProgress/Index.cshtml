@{
    ViewData["Title"] = "Rueda del Progreso";
}
@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <style>
        /* Wheel of Progress Custom Styles */
        .progress-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
            border-radius: 0 0 16px 16px;
        }

        .chart-container {
            background: white;
            border-radius: 16px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            border: 1px solid #f0f0f0;
            padding: 2rem;
            margin-bottom: 2rem;
            position: relative;
            height: fit-content;
        }

        .chart-wrapper {
            position: relative;
            height: 320px;
            width: 100%;
            padding: 0.5rem;
        }

        #progressWheelChart {
            max-width: 100%;
            max-height: 100%;
            image-rendering: -moz-crisp-edges;
            image-rendering: -webkit-crisp-edges;
            image-rendering: pixelated;
            image-rendering: crisp-edges;
            transform: translateZ(0);
            backface-visibility: hidden;
            perspective: 1000;
        }

        .global-progress-overlay {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 50%;
            width: 120px;
            height: 120px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            border: 3px solid #667eea;
        }

        .global-progress-number {
            font-size: 2rem;
            font-weight: 700;
            color: #667eea;
            line-height: 1;
        }

        .global-progress-label {
            font-size: 0.75rem;
            color: #718096;
            font-weight: 600;
            margin-top: 0.25rem;
        }

        .progress-table-container {
            background: white;
            border-radius: 16px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            border: 1px solid #f0f0f0;
            margin-bottom: 2rem;
            overflow: hidden;
        }

        .progress-table-header {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 1.5rem;
            border-bottom: 1px solid #e9ecef;
        }

        .progress-table {
            margin: 0;
            font-size: 0.9rem;
        }

        .progress-table th {
            background: #f8f9fa;
            border: none;
            font-weight: 600;
            color: #495057;
            padding: 1rem 0.75rem;
            font-size: 0.8rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .progress-table td {
            padding: 1rem 0.75rem;
            border-top: 1px solid #e9ecef;
            vertical-align: middle;
        }

        .area-cell {
            font-weight: 600;
            color: white;
            text-align: center;
            border-radius: 8px;
            margin: 0.25rem;
            padding: 1rem 0.5rem !important;
            vertical-align: middle;
            position: relative;
        }

        .category-cell {
            background: #f8f9fa;
            border-radius: 6px;
            margin: 0.25rem;
            padding: 0.75rem !important;
            font-weight: 500;
            color: #495057;
        }

        .input-progress {
            border: 2px solid #e9ecef;
            border-radius: 6px;
            padding: 0.5rem;
            font-size: 0.85rem;
            transition: all 0.3s ease;
            width: 100%;
        }

        .input-progress:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
            outline: none;
        }

        .progress-input {
            width: 90px;
            text-align: center;
            font-weight: 600;
        }

        .deadline-input {
            min-width: 160px;
        }
        
        .goal-input {
            min-width: 200px;
        }
        
        .action-input {
            min-width: 180px;
        }

        .save-section {
            padding: 2rem;
            border-top: 2px solid #f0f0f0;
            background: #f8f9fa;
        }

        .save-btn {
            background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
            color: white;
            border: none;
            padding: 0.875rem 2rem;
            border-radius: 50px;
            font-weight: 600;
            font-size: 1rem;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(72, 187, 120, 0.3);
        }

        .save-btn:hover {
            background: linear-gradient(135deg, #38a169 0%, #2f855a 100%);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(72, 187, 120, 0.4);
        }

        .save-btn:disabled {
            background: #e9ecef;
            color: #6c757d;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .stats-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.06);
            border: 1px solid #f0f0f0;
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            color: #667eea;
            display: block;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            font-size: 0.875rem;
            color: #718096;
            font-weight: 500;
        }

        .loading-spinner {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 10;
        }

        .success-message, .error-message {
            margin-top: 1rem;
            padding: 1rem;
            border-radius: 12px;
            text-align: center;
        }

        .success-message {
            background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
            color: white;
        }

        .error-message {
            background: linear-gradient(135deg, #f56565 0%, #e53e3e 100%);
            color: white;
        }

        .flatpickr-input {
            background: white !important;
            cursor: pointer;
        }

        @@media (max-width: 768px) {
            .chart-wrapper {
                height: 300px;
                padding: 0.5rem;
            }

            .global-progress-overlay {
                width: 80px;
                height: 80px;
            }

            .global-progress-number {
                font-size: 1.5rem;
            }

            .progress-table-container {
                overflow-x: auto;
            }

            .progress-table {
                min-width: 800px;
            }

            .stats-cards {
                grid-template-columns: 1fr 1fr;
            }
        }

        @@media (max-width: 576px) {
            .stats-cards {
                grid-template-columns: 1fr;
            }
        }
    </style>
}

<!-- Page Header -->
<div class="progress-header">
    <div class="container">
        <h1 class="h2 mb-0" data-translate-key="page_titles.wheelOfProgress">Rueda del Progreso</h1>
        <p class="mb-0 mt-2 opacity-90" data-translate-key="wheelOfProgress.subtitle">Establece metas, registra tu progreso y planifica tus siguientes acciones</p>
    </div>
</div>

<div class="container">
    <!-- Breadcrumbs -->
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb bg-transparent p-0">
            <li class="breadcrumb-item">
                <a asp-controller="Admin" asp-action="Dashboard" data-translate-key="breadcrumbs.dashboard">Dashboard</a>
            </li>
            <li class="breadcrumb-item active" aria-current="page" data-translate-key="breadcrumbs.wheelOfProgress">Rueda del Progreso</li>
        </ol>
    </nav>

    <!-- Statistics Cards -->
    <div class="stats-cards">
        <div class="stat-card">
            <span id="globalProgressStat" class="stat-number">0%</span>
            <span class="stat-label" data-translate-key="wheelOfProgress.globalProgress">Progreso Global</span>
        </div>
        <div class="stat-card">
            <span id="totalMetasStat" class="stat-number">0</span>
            <span class="stat-label" data-translate-key="wheelOfProgress.totalCategories">Total Metas</span>
        </div>
        <div class="stat-card">
            <span id="metasCompletadasStat" class="stat-number">0</span>
            <span class="stat-label" data-translate-key="wheelOfProgress.categoriesWithGoals">Completadas</span>
        </div>
        <div class="stat-card">
            <span id="ultimaActualizacionStat" class="stat-number">-</span>
            <span class="stat-label" data-translate-key="wheelOfProgress.lastUpdated">Última Actualización</span>
        </div>
    </div>

    <div class="row">
        <!-- Chart Column - Más pequeño -->
        <div class="col-md-4">
            <div class="chart-container">
                <h3 class="text-center mb-3" data-translate-key="wheelOfProgress.chartTitle">
                    <i class="fas fa-chart-pie me-2"></i>
                    Tu Rueda del Progreso
                </h3>
                <div class="chart-wrapper">
                    <canvas id="progressWheelChart" width="350" height="350"></canvas>
                    <div class="global-progress-overlay">
                        <div id="globalProgressNumber" class="global-progress-number">0%</div>
                        <div class="global-progress-label" data-translate-key="wheelOfProgress.globalLabel">Global</div>
                    </div>
                    <div id="chartLoading" class="loading-spinner d-none">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading chart...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Progress Table Column - Más ancho -->
        <div class="col-md-8">
            <div class="progress-table-container">
                <div class="progress-table-header">
                    <h3 class="h5 mb-0" data-translate-key="wheelOfProgress.progressTableTitle">
                        <i class="fas fa-tasks me-2"></i>
                        Gestión de Metas y Progreso
                    </h3>
                </div>
                
                <div class="table-responsive">
                    <table class="table progress-table">
                        <thead>
                            <tr>
                                <th data-translate-key="table_headers.area">Área</th>
                                <th data-translate-key="table_headers.categories">Categorías</th>
                                <th data-translate-key="table_headers.goal">Meta</th>
                                <th data-translate-key="table_headers.percentage">%</th>
                                <th data-translate-key="table_headers.nextAction">Siguiente Acción</th>
                                <th data-translate-key="table_headers.deadline">Fecha Límite</th>
                            </tr>
                        </thead>
                        <tbody id="progressTableBody">
                            <!-- La tabla será poblada dinámicamente via JavaScript -->
                            <tr>
                                <td colspan="6" class="text-center text-muted py-4">
                                    <i class="fas fa-spinner fa-spin fa-2x"></i>
                                    <p class="mt-2">Cargando datos de progreso...</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <!-- Save Section -->
                <div class="save-section">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>
                                <span data-translate-key="wheelOfProgress.saveNote">Haz clic en el botón para guardar los cambios</span>
                            </small>
                        </div>
                        <button id="saveProgressBtn" class="save-btn" data-translate-key="buttons.saveProgress">
                            <i class="fas fa-save me-2"></i>Guardar Progreso
                        </button>
                    </div>
                    <div id="saveMessage"></div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- CSRF Token for AJAX requests -->
    @Html.AntiForgeryToken()
</div>

@section Scripts {
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <!-- Flatpickr for date picking -->
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    
    <script>
        // Wheel of Progress JavaScript
        const WheelOfProgress = {
            config: {
                chart: null,
                baseUrl: '/WheelOfProgress',
                currentData: [],
                isLoading: false,
                datepickers: []
            },

            // Initialize the module
            init: function() {
                console.log('Initializing Wheel of Progress module...');
                this.loadWheelData();
                this.bindEvents();
            },
            
            // Load data from backend
            loadWheelData: async function() {
                this.showLoading(true);
                
                try {
                    const response = await $.get(`${this.config.baseUrl}/GetWheelData`);
                    
                    if (response.success && response.data) {
                        console.log('Wheel data loaded:', response.data);
                        this.config.currentData = response.data;
                        this.renderProgressTable(response.data.areas);
                        this.updateStatistics(response.data.stats);
                        this.initializeChart();
                        this.initializeDatepickers();
                    } else {
                        this.showError('Error al cargar los datos');
                    }
                } catch (error) {
                    console.error('Error loading wheel data:', error);
                    this.showError('Error de conexión al cargar los datos');
                } finally {
                    this.showLoading(false);
                }
            },
            
            // Render progress table
            renderProgressTable: function(areas) {
                const tbody = $('#progressTableBody');
                tbody.empty();
                
                areas.forEach(area => {
                    const categorias = area.categorias || [];
                    categorias.forEach((categoria, index) => {
                        const isFirstCategory = index === 0;
                        const rowspan = categorias.length;
                        
                        const fechaLimite = categoria.fechaLimite ? 
                            new Date(categoria.fechaLimite).toISOString().split('T')[0] : '';
                        
                        let row = `<tr data-area-id="${area.id}" data-category-id="${categoria.id}">`;
                        
                        if (isFirstCategory) {
                            // Use white text for dark backgrounds (like Vida Empresarial #2c3e50)
                            const textColor = area.iconColor === '#2c3e50' ? 'white' : 'white';
                            row += `
                                <td class="area-cell" rowspan="${rowspan}" style="background-color: ${area.iconColor}; color: ${textColor};">
                                    <div>
                                        <i class="${area.iconClass}"></i><br>
                                        <small>${area.nombre}</small>
                                    </div>
                                </td>
                            `;
                        }
                        
                        row += `
                            <td class="category-cell">
                                <span>${categoria.nombre}</span>
                            </td>
                            <td>
                                <input type="text" 
                                       class="form-control input-progress goal-input" 
                                       data-category-id="${categoria.id}"
                                       value="${categoria.meta || ''}"
                                       placeholder="Define tu meta..."
                                       maxlength="1000">
                            </td>
                            <td>
                                <input type="number" 
                                       class="form-control input-progress progress-input" 
                                       data-category-id="${categoria.id}"
                                       value="${categoria.porcentajeProgreso || 0}"
                                       min="0" 
                                       max="100"
                                       placeholder="0">
                            </td>
                            <td>
                                <input type="text" 
                                       class="form-control input-progress action-input" 
                                       data-category-id="${categoria.id}"
                                       value="${categoria.siguienteAccion || ''}"
                                       placeholder="Próxima acción..."
                                       maxlength="1000">
                            </td>
                            <td>
                                <input type="text" 
                                       class="form-control input-progress deadline-input flatpickr-input" 
                                       data-category-id="${categoria.id}"
                                       value="${fechaLimite}"
                                       placeholder="Seleccionar fecha..."
                                       readonly>
                            </td>
                        </tr>`;
                        
                        tbody.append(row);
                    });
                });
            },
            
            // Update statistics display
            updateStatistics: function(stats) {
                $('#globalProgressStat').text(Math.round(stats.progresoGlobal) + '%');
                $('#totalMetasStat').text(stats.totalMetas);
                $('#metasCompletadasStat').text(stats.metasCompletadas);
                $('#globalProgressNumber').text(Math.round(stats.progresoGlobal) + '%');
                
                if (stats.ultimaActualizacion) {
                    const fecha = new Date(stats.ultimaActualizacion);
                    $('#ultimaActualizacionStat').text(fecha.toLocaleDateString());
                } else {
                    $('#ultimaActualizacionStat').text('-');
                }
            },

            // Initialize Chart.js polar area chart
            initializeChart: function() {
                const canvas = document.getElementById('progressWheelChart');
                const ctx = canvas.getContext('2d');
                
                // Advanced canvas optimization for crisp rendering
                const dpr = window.devicePixelRatio || 1;
                const rect = canvas.getBoundingClientRect();
                
                canvas.width = rect.width * dpr;
                canvas.height = rect.height * dpr;
                ctx.scale(dpr, dpr);
                
                canvas.style.width = rect.width + 'px';
                canvas.style.height = rect.height + 'px';
                
                // Get current language for translations
                const currentLang = localStorage.getItem('selectedLanguage') || 'es';
                const isSpanish = currentLang === 'es';
                
                // Prepare chart data with translations
                const areas = this.config.currentData.areas || [];
                const labels = areas.map(area => {
                    if (isSpanish && window.translations && window.translations.es) {
                        const translatedName = window.translations.es[`areas.${area.nombre.toLowerCase()}`];
                        return translatedName || area.nombre;
                    }
                    return area.nombre;
                });
                
                // Calculate average progress for each area
                const data = areas.map(area => {
                    const categorias = area.categorias || [];
                    if (categorias.length === 0) return 0;
                    
                    const totalProgress = categorias.reduce((sum, cat) => sum + (cat.porcentajeProgreso || 0), 0);
                    return Math.round((totalProgress / categorias.length) / 10); // Scale to 0-10 for polar chart
                });
                
                const backgroundColors = areas.map(area => this.hexToRgba(area.iconColor, 0.8));
                const borderColors = areas.map(area => area.iconColor);

                this.config.chart = new Chart(ctx, {
                    type: 'polarArea',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: isSpanish ? 'Puntuación de Áreas de Vida' : 'Life Areas Score',
                            data: data,
                            backgroundColor: backgroundColors,
                            borderColor: borderColors,
                            borderWidth: 3,
                            borderAlign: 'inner'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        devicePixelRatio: dpr,
                        plugins: {
                            legend: {
                                display: true,
                                position: 'bottom',
                                labels: {
                                    font: {
                                        size: Math.round(11 * dpr) / dpr,
                                        weight: '600'
                                    },
                                    color: '#2d3748',
                                    padding: 12,
                                    usePointStyle: true,
                                    pointStyle: 'circle'
                                }
                            },
                            tooltip: {
                                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                titleColor: '#fff',
                                bodyColor: '#fff',
                                borderColor: '#667eea',
                                borderWidth: 1,
                                cornerRadius: 8,
                                displayColors: true,
                                callbacks: {
                                    title: function(context) {
                                        return context[0].label;
                                    },
                                    label: function(context) {
                                        const progressLabel = isSpanish ? 'Progreso Promedio' : 'Average Progress';
                                        const actualProgress = Math.round(context.parsed * 10); // Convert back to 0-100 scale
                                        return `${progressLabel}: ${actualProgress}%`;
                                    }
                                }
                            }
                        },
                        scales: {
                            r: {
                                beginAtZero: true,
                                min: 0,
                                max: 10,
                                stepSize: 1,
                                ticks: {
                                    font: {
                                        size: Math.round(10 * dpr) / dpr,
                                        weight: '600'
                                    },
                                    color: '#718096',
                                    backdropColor: 'rgba(255, 255, 255, 0.9)',
                                    backdropPadding: 3,
                                    showLabelBackdrop: true
                                },
                                grid: {
                                    color: '#e2e8f0',
                                    lineWidth: 1
                                },
                                angleLines: {
                                    color: '#e2e8f0',
                                    lineWidth: 1
                                }
                            }
                        },
                        animation: {
                            duration: 1000,
                            easing: 'easeInOutQuart'
                        },
                        interaction: {
                            intersect: false,
                            mode: 'nearest'
                        }
                    }
                });
                
                // Force chart to be crisp by setting canvas size properly
                setTimeout(() => {
                    if (this.config.chart) {
                        this.config.chart.resize();
                    }
                }, 100);
            },

            // Initialize Flatpickr date pickers
            initializeDatepickers: function() {
                const dateInputs = document.querySelectorAll('.deadline-input');
                
                dateInputs.forEach(input => {
                    const flatpickrInstance = flatpickr(input, {
                        dateFormat: "Y-m-d",
                        allowInput: true,
                        locale: localStorage.getItem('selectedLanguage') === 'es' ? 'es' : 'en',
                        minDate: "today",
                        onChange: (selectedDates, dateStr) => {
                            this.updateGlobalProgress();
                        }
                    });
                    
                    this.config.datepickers.push(flatpickrInstance);
                });
            },

            // Bind all event handlers
            bindEvents: function() {
                // Progress percentage input change events
                $(document).on('input change', '.progress-input', (e) => {
                    const value = parseInt($(e.target).val()) || 0;
                    if (value < 0) $(e.target).val(0);
                    if (value > 100) $(e.target).val(100);
                    
                    this.updateGlobalProgress();
                });

                // Save progress button
                $('#saveProgressBtn').on('click', (e) => {
                    e.preventDefault();
                    this.saveProgress();
                });

                // Auto-save desactivado por ahora para evitar errores
                // Se puede reactivar más adelante con un debounce mayor
                /*
                let autoSaveTimeout;
                $(document).on('input', '.input-progress', () => {
                    clearTimeout(autoSaveTimeout);
                    autoSaveTimeout = setTimeout(() => {
                        this.saveProgress(true); // Silent save
                    }, 5000); // Aumentado a 5 segundos
                });
                */

                // Window resize handler for chart responsiveness
                $(window).on('resize', this.debounce(() => {
                    if (this.config.chart) {
                        this.config.chart.resize();
                    }
                }, 300));
            },

            // Update global progress percentage
            updateGlobalProgress: function() {
                const progressInputs = $('.progress-input');
                let total = 0;
                let count = 0;

                progressInputs.each(function() {
                    const value = parseInt($(this).val()) || 0;
                    total += value;
                    count++;
                });

                const globalProgress = count > 0 ? Math.round(total / count) : 0;
                
                $('#globalProgressNumber').text(globalProgress + '%');
                
                // Update stats card
                $('.stat-number').first().text(globalProgress + '%');
            },

            // Save progress to server
            saveProgress: function(silent = false) {
                if (this.config.isLoading) return;

                this.config.isLoading = true;
                const $btn = $('#saveProgressBtn');
                const originalText = $btn.html();
                
                if (!silent) {
                    $btn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Guardando...');
                }

                // Collect all progress data from the table
                const categories = [];
                
                $('#progressTableBody tr').each(function() {
                    const $row = $(this);
                    const categoryId = parseInt($row.data('category-id'));
                    
                    const meta = $row.find('.goal-input').val() || '';
                    const porcentajeProgreso = parseInt($row.find('.progress-input').val()) || 0;
                    const siguienteAccion = $row.find('.action-input').val() || '';
                    const fechaLimiteValue = $row.find('.deadline-input').val();
                    
                    // Convertir fecha a formato ISO completo para PostgreSQL
                    let fechaLimite = null;
                    if (fechaLimiteValue && fechaLimiteValue.trim() !== '') {
                        // Crear fecha local y convertir a ISO (incluye hora)
                        const dateObj = new Date(fechaLimiteValue + 'T00:00:00');
                        fechaLimite = dateObj.toISOString();
                    }
                    
                    categories.push({
                        CategoriaProgresoId: categoryId,
                        Meta: meta,
                        PorcentajeProgreso: porcentajeProgreso,
                        SiguienteAccion: siguienteAccion,
                        FechaLimite: fechaLimite
                    });
                });

                const progressData = {
                    Categories: categories
                };

                // Get CSRF token
                const token = $('input[name="__RequestVerificationToken"]').val();
                
                $.ajax({
                    url: `${this.config.baseUrl}/SaveProgress`,
                    method: 'POST',
                    contentType: 'application/json',
                    headers: {
                        'RequestVerificationToken': token
                    },
                    data: JSON.stringify(progressData),
                    success: (response) => {
                        if (response.success) {
                            if (!silent) {
                                this.showMessage('success', response.message, response);
                            }
                            // Update statistics if provided
                            if (response.updatedStats) {
                                this.updateStatistics(response.updatedStats);
                            }
                        } else {
                            this.showMessage('error', response.message || 'Error saving progress');
                        }
                    },
                    error: (xhr) => {
                        if (!silent && xhr.status >= 400) {
                            this.showMessage('error', 'Error al guardar el progreso. Por favor intente nuevamente.');
                        }
                    },
                    complete: () => {
                        this.config.isLoading = false;
                        if (!silent) {
                            $btn.prop('disabled', false).html(originalText);
                        }
                    }
                });
            },

            // Show success/error message
            showMessage: function(type, message, data = null) {
                const className = type === 'success' ? 'success-message' : 'error-message';
                const icon = type === 'success' ? 'fas fa-check-circle' : 'fas fa-exclamation-triangle';
                
                let extraInfo = '';
                if (type === 'success' && data && data.updatedStats) {
                    extraInfo = `
                        <div style="margin-top: 0.5rem; font-size: 0.9rem;">
                            Progreso global: ${Math.round(data.updatedStats.progresoGlobal)}% | 
                            Metas completadas: ${data.updatedStats.metasCompletadas}
                        </div>
                    `;
                }

                const messageHtml = `
                    <div class="${className}">
                        <i class="${icon} me-2"></i>${message}${extraInfo}
                    </div>
                `;
                
                $('#saveMessage').html(messageHtml);
                
                // Auto remove after 4 seconds
                setTimeout(() => {
                    $('#saveMessage').fadeOut(300, function() {
                        $(this).empty().show();
                    });
                }, 4000);
            },

            // Utility functions
            hexToRgba: function(hex, opacity) {
                if (!hex || !hex.startsWith('#')) return `rgba(102, 126, 234, ${opacity})`;
                
                const r = parseInt(hex.slice(1, 3), 16);
                const g = parseInt(hex.slice(3, 5), 16);
                const b = parseInt(hex.slice(5, 7), 16);
                
                return `rgba(${r}, ${g}, ${b}, ${opacity})`;
            },

            debounce: function(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func.apply(this, args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            },

            // Show loading state
            showLoading: function(show) {
                if (show) {
                    $('#chartLoading').removeClass('d-none');
                } else {
                    $('#chartLoading').addClass('d-none');
                }
            },

            // Show error message
            showError: function(message) {
                console.error('Wheel of Progress Error:', message);
                const tbody = $('#progressTableBody');
                tbody.html(`
                    <tr>
                        <td colspan="6" class="text-center text-danger py-4">
                            <i class="fas fa-exclamation-triangle fa-2x"></i>
                            <p class="mt-2">${message}</p>
                        </td>
                    </tr>
                `);
            }
        };

        // Initialize when document is ready
        $(document).ready(function() {
            WheelOfProgress.init();
        });
    </script>
}