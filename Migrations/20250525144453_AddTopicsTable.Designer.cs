// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ToolBox.Data;

#nullable disable

namespace ToolBox.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250525144453_AddTopicsTable")]
    partial class AddTopicsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ToolBox.Models.AreaProgreso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IconColor")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OrdenVisualizacion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrdenVisualizacion");

                    b.ToTable("AreasProgreso");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Descripcion = "Carrera, negocios y crecimiento profesional",
                            IconClass = "fas fa-briefcase",
                            IconColor = "#2c3e50",
                            Nombre = "Vida Empresarial",
                            OrdenVisualizacion = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Descripcion = "Expresión artística y creatividad",
                            IconClass = "fas fa-palette",
                            IconColor = "#e74c3c",
                            Nombre = "Vida Creativa",
                            OrdenVisualizacion = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Descripcion = "Relaciones con amigos y comunidad",
                            IconClass = "fas fa-users",
                            IconColor = "#3498db",
                            Nombre = "Vida Social",
                            OrdenVisualizacion = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Descripcion = "Relaciones románticas y pareja",
                            IconClass = "fas fa-heart",
                            IconColor = "#e91e63",
                            Nombre = "Vida Amorosa",
                            OrdenVisualizacion = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Descripcion = "Misión personal y espiritualidad",
                            IconClass = "fas fa-compass",
                            IconColor = "#9b59b6",
                            Nombre = "Propósito de Vida",
                            OrdenVisualizacion = 5
                        });
                });

            modelBuilder.Entity("ToolBox.Models.CategoriaHabito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("OrdenVisualizacion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrdenVisualizacion");

                    b.ToTable("CategoriasHabitos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#e74c3c",
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6441),
                            Descripcion = "Hábitos relacionados con bienestar físico y mental",
                            FechaCreacion = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6444),
                            IconClass = "fas fa-heartbeat",
                            IsActive = true,
                            Nombre = "Salud",
                            OrdenVisualizacion = 1
                        },
                        new
                        {
                            Id = 2,
                            Color = "#3498db",
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6441),
                            Descripcion = "Hábitos que mejoran el rendimiento y eficiencia",
                            FechaCreacion = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6454),
                            IconClass = "fas fa-chart-line",
                            IsActive = true,
                            Nombre = "Productividad",
                            OrdenVisualizacion = 2
                        },
                        new
                        {
                            Id = 3,
                            Color = "#f39c12",
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6441),
                            Descripcion = "Hábitos de educación y desarrollo personal",
                            FechaCreacion = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6457),
                            IconClass = "fas fa-graduation-cap",
                            IsActive = true,
                            Nombre = "Aprendizaje",
                            OrdenVisualizacion = 3
                        },
                        new
                        {
                            Id = 4,
                            Color = "#27ae60",
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6441),
                            Descripcion = "Hábitos de meditación y atención plena",
                            FechaCreacion = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6459),
                            IconClass = "fas fa-leaf",
                            IsActive = true,
                            Nombre = "Mindfulness",
                            OrdenVisualizacion = 4
                        },
                        new
                        {
                            Id = 5,
                            Color = "#9b59b6",
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6441),
                            Descripcion = "Hábitos relacionados con relaciones y vida social",
                            FechaCreacion = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6461),
                            IconClass = "fas fa-users",
                            IsActive = true,
                            Nombre = "Social",
                            OrdenVisualizacion = 5
                        },
                        new
                        {
                            Id = 6,
                            Color = "#e67e22",
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6441),
                            Descripcion = "Hábitos artísticos y de expresión creativa",
                            FechaCreacion = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6462),
                            IconClass = "fas fa-palette",
                            IsActive = true,
                            Nombre = "Creatividad",
                            OrdenVisualizacion = 6
                        },
                        new
                        {
                            Id = 7,
                            Color = "#16a085",
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6441),
                            Descripcion = "Hábitos de manejo financiero y ahorro",
                            FechaCreacion = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6464),
                            IconClass = "fas fa-dollar-sign",
                            IsActive = true,
                            Nombre = "Finanzas",
                            OrdenVisualizacion = 7
                        },
                        new
                        {
                            Id = 8,
                            Color = "#95a5a6",
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6441),
                            Descripcion = "Hábitos de organización y cuidado del hogar",
                            FechaCreacion = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6466),
                            IconClass = "fas fa-home",
                            IsActive = true,
                            Nombre = "Hogar",
                            OrdenVisualizacion = 8
                        });
                });

            modelBuilder.Entity("ToolBox.Models.CategoriaProgreso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaProgresoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OrdenVisualizacion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AreaProgresoId", "OrdenVisualizacion");

                    b.ToTable("CategoriasProgreso");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaProgresoId = 1,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Nombre = "Dinero y Finanzas",
                            OrdenVisualizacion = 1
                        },
                        new
                        {
                            Id = 2,
                            AreaProgresoId = 1,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Nombre = "Carrera y Misión",
                            OrdenVisualizacion = 2
                        },
                        new
                        {
                            Id = 3,
                            AreaProgresoId = 1,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Nombre = "Productividad",
                            OrdenVisualizacion = 3
                        },
                        new
                        {
                            Id = 4,
                            AreaProgresoId = 2,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Nombre = "Arte y Expresión",
                            OrdenVisualizacion = 1
                        },
                        new
                        {
                            Id = 5,
                            AreaProgresoId = 2,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Nombre = "Proyectos Creativos",
                            OrdenVisualizacion = 2
                        },
                        new
                        {
                            Id = 6,
                            AreaProgresoId = 2,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Nombre = "Inspiración",
                            OrdenVisualizacion = 3
                        },
                        new
                        {
                            Id = 7,
                            AreaProgresoId = 3,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Nombre = "Amistades",
                            OrdenVisualizacion = 1
                        },
                        new
                        {
                            Id = 8,
                            AreaProgresoId = 3,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Nombre = "Networking",
                            OrdenVisualizacion = 2
                        },
                        new
                        {
                            Id = 9,
                            AreaProgresoId = 3,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Nombre = "Comunidad",
                            OrdenVisualizacion = 3
                        },
                        new
                        {
                            Id = 10,
                            AreaProgresoId = 4,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Nombre = "Relación de Pareja",
                            OrdenVisualizacion = 1
                        },
                        new
                        {
                            Id = 11,
                            AreaProgresoId = 4,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Nombre = "Familia",
                            OrdenVisualizacion = 2
                        },
                        new
                        {
                            Id = 12,
                            AreaProgresoId = 4,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Nombre = "Amor Propio",
                            OrdenVisualizacion = 3
                        },
                        new
                        {
                            Id = 13,
                            AreaProgresoId = 5,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Nombre = "Espiritualidad",
                            OrdenVisualizacion = 1
                        },
                        new
                        {
                            Id = 14,
                            AreaProgresoId = 5,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Nombre = "Valores y Principios",
                            OrdenVisualizacion = 2
                        },
                        new
                        {
                            Id = 15,
                            AreaProgresoId = 5,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5570),
                            Nombre = "Salud y Fitness",
                            OrdenVisualizacion = 3
                        });
                });

            modelBuilder.Entity("ToolBox.Models.FrecuenciaHabito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("DiasIntervalo")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("OrdenVisualizacion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrdenVisualizacion");

                    b.ToTable("FrecuenciasHabitos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6441),
                            Descripcion = "Todos los días",
                            DiasIntervalo = 1,
                            FechaCreacion = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6470),
                            IsActive = true,
                            Nombre = "Diario",
                            OrdenVisualizacion = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6441),
                            Descripcion = "Una vez por semana",
                            DiasIntervalo = 7,
                            FechaCreacion = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6475),
                            IsActive = true,
                            Nombre = "Semanal",
                            OrdenVisualizacion = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6441),
                            Descripcion = "Lunes, miércoles y viernes",
                            DiasIntervalo = 2,
                            FechaCreacion = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6477),
                            IsActive = true,
                            Nombre = "3 veces por semana",
                            OrdenVisualizacion = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6441),
                            Descripcion = "Sábados y domingos",
                            DiasIntervalo = 7,
                            FechaCreacion = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6479),
                            IsActive = true,
                            Nombre = "Fines de semana",
                            OrdenVisualizacion = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6441),
                            Descripcion = "Lunes a viernes",
                            DiasIntervalo = 1,
                            FechaCreacion = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6481),
                            IsActive = true,
                            Nombre = "Días laborales",
                            OrdenVisualizacion = 5
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6441),
                            Descripcion = "Una vez al mes",
                            DiasIntervalo = 30,
                            FechaCreacion = new DateTime(2025, 5, 25, 14, 44, 52, 101, DateTimeKind.Utc).AddTicks(6483),
                            IsActive = true,
                            Nombre = "Mensual",
                            OrdenVisualizacion = 6
                        });
                });

            modelBuilder.Entity("ToolBox.Models.Habito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaHabitoId")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FrecuenciaHabitoId")
                        .HasColumnType("integer");

                    b.Property<bool>("HabilitarRecordatorios")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaHabitoId");

                    b.HasIndex("FrecuenciaHabitoId");

                    b.HasIndex("UsuarioId", "FechaCreacion");

                    b.ToTable("Habitos");
                });

            modelBuilder.Entity("ToolBox.Models.LifeArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IconColor")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DisplayOrder");

                    b.ToTable("LifeAreas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672),
                            Description = "Connection with your inner self and beliefs",
                            DisplayOrder = 1,
                            IconClass = "fas fa-pray",
                            IconColor = "#8e44ad",
                            IsActive = true,
                            Title = "Spiritual",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672),
                            Description = "Physical wellness and fitness",
                            DisplayOrder = 2,
                            IconClass = "fas fa-heartbeat",
                            IconColor = "#e74c3c",
                            IsActive = true,
                            Title = "Physical Health",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672),
                            Description = "Relationships with loved ones",
                            DisplayOrder = 3,
                            IconClass = "fas fa-users",
                            IconColor = "#3498db",
                            IsActive = true,
                            Title = "Family & Friends",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672),
                            Description = "Romantic relationships and partnerships",
                            DisplayOrder = 4,
                            IconClass = "fas fa-heart",
                            IconColor = "#e91e63",
                            IsActive = true,
                            Title = "Partner",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672),
                            Description = "Professional growth and purpose",
                            DisplayOrder = 5,
                            IconClass = "fas fa-briefcase",
                            IconColor = "#34495e",
                            IsActive = true,
                            Title = "Mission/Career",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672),
                            Description = "Financial stability and growth",
                            DisplayOrder = 6,
                            IconClass = "fas fa-dollar-sign",
                            IconColor = "#27ae60",
                            IsActive = true,
                            Title = "Finances",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672),
                            Description = "Self-improvement and learning",
                            DisplayOrder = 7,
                            IconClass = "fas fa-graduation-cap",
                            IconColor = "#f39c12",
                            IsActive = true,
                            Title = "Personal Growth",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672),
                            Description = "Leisure activities and hobbies",
                            DisplayOrder = 8,
                            IconClass = "fas fa-gamepad",
                            IconColor = "#9b59b6",
                            IsActive = true,
                            Title = "Fun & Recreation",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672),
                            Description = "Travel and new adventures",
                            DisplayOrder = 9,
                            IconClass = "fas fa-plane",
                            IconColor = "#1abc9c",
                            IsActive = true,
                            Title = "Experiences",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672),
                            Description = "Living space and surroundings",
                            DisplayOrder = 10,
                            IconClass = "fas fa-home",
                            IconColor = "#95a5a6",
                            IsActive = true,
                            Title = "Environment",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 99, DateTimeKind.Utc).AddTicks(672)
                        });
                });

            modelBuilder.Entity("ToolBox.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleName", "ActionName")
                        .IsUnique();

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionName = "Read",
                            Category = "General",
                            Description = "Ver y listar en Tablero",
                            ModuleName = "Dashboard"
                        },
                        new
                        {
                            Id = 2,
                            ActionName = "Write",
                            Category = "General",
                            Description = "Editar y actualizar en Tablero",
                            ModuleName = "Dashboard"
                        },
                        new
                        {
                            Id = 3,
                            ActionName = "Create",
                            Category = "General",
                            Description = "Crear nuevos registros en Tablero",
                            ModuleName = "Dashboard"
                        },
                        new
                        {
                            Id = 4,
                            ActionName = "Read",
                            Category = "Gestión de Contenido",
                            Description = "Ver y listar en Temas",
                            ModuleName = "Topics"
                        },
                        new
                        {
                            Id = 5,
                            ActionName = "Write",
                            Category = "Gestión de Contenido",
                            Description = "Editar y actualizar en Temas",
                            ModuleName = "Topics"
                        },
                        new
                        {
                            Id = 6,
                            ActionName = "Create",
                            Category = "Gestión de Contenido",
                            Description = "Crear nuevos registros en Temas",
                            ModuleName = "Topics"
                        },
                        new
                        {
                            Id = 7,
                            ActionName = "Read",
                            Category = "Gestión de Contenido",
                            Description = "Ver y listar en Gestión de Videos",
                            ModuleName = "VideoManagement"
                        },
                        new
                        {
                            Id = 8,
                            ActionName = "Write",
                            Category = "Gestión de Contenido",
                            Description = "Editar y actualizar en Gestión de Videos",
                            ModuleName = "VideoManagement"
                        },
                        new
                        {
                            Id = 9,
                            ActionName = "Create",
                            Category = "Gestión de Contenido",
                            Description = "Crear nuevos registros en Gestión de Videos",
                            ModuleName = "VideoManagement"
                        },
                        new
                        {
                            Id = 10,
                            ActionName = "Read",
                            Category = "Gestión de Usuarios",
                            Description = "Ver y listar en Clientes",
                            ModuleName = "Customers"
                        },
                        new
                        {
                            Id = 11,
                            ActionName = "Write",
                            Category = "Gestión de Usuarios",
                            Description = "Editar y actualizar en Clientes",
                            ModuleName = "Customers"
                        },
                        new
                        {
                            Id = 12,
                            ActionName = "Create",
                            Category = "Gestión de Usuarios",
                            Description = "Crear nuevos registros en Clientes",
                            ModuleName = "Customers"
                        },
                        new
                        {
                            Id = 13,
                            ActionName = "Read",
                            Category = "Gestión de Usuarios",
                            Description = "Ver y listar en Usuarios",
                            ModuleName = "Users"
                        },
                        new
                        {
                            Id = 14,
                            ActionName = "Write",
                            Category = "Gestión de Usuarios",
                            Description = "Editar y actualizar en Usuarios",
                            ModuleName = "Users"
                        },
                        new
                        {
                            Id = 15,
                            ActionName = "Create",
                            Category = "Gestión de Usuarios",
                            Description = "Crear nuevos registros en Usuarios",
                            ModuleName = "Users"
                        },
                        new
                        {
                            Id = 16,
                            ActionName = "Read",
                            Category = "Gestión de Usuarios",
                            Description = "Ver y listar en Roles",
                            ModuleName = "Roles"
                        },
                        new
                        {
                            Id = 17,
                            ActionName = "Write",
                            Category = "Gestión de Usuarios",
                            Description = "Editar y actualizar en Roles",
                            ModuleName = "Roles"
                        },
                        new
                        {
                            Id = 18,
                            ActionName = "Create",
                            Category = "Gestión de Usuarios",
                            Description = "Crear nuevos registros en Roles",
                            ModuleName = "Roles"
                        },
                        new
                        {
                            Id = 19,
                            ActionName = "Read",
                            Category = "Gestión de Usuarios",
                            Description = "Ver y listar en Instructores",
                            ModuleName = "Instructors"
                        },
                        new
                        {
                            Id = 20,
                            ActionName = "Write",
                            Category = "Gestión de Usuarios",
                            Description = "Editar y actualizar en Instructores",
                            ModuleName = "Instructors"
                        },
                        new
                        {
                            Id = 21,
                            ActionName = "Create",
                            Category = "Gestión de Usuarios",
                            Description = "Crear nuevos registros en Instructores",
                            ModuleName = "Instructors"
                        },
                        new
                        {
                            Id = 22,
                            ActionName = "Read",
                            Category = "Gestión de Contenido",
                            Description = "Ver y listar en Toolbox Academy",
                            ModuleName = "ToolboxAcademy"
                        },
                        new
                        {
                            Id = 23,
                            ActionName = "Write",
                            Category = "Gestión de Contenido",
                            Description = "Editar y actualizar en Toolbox Academy",
                            ModuleName = "ToolboxAcademy"
                        },
                        new
                        {
                            Id = 24,
                            ActionName = "Create",
                            Category = "Gestión de Contenido",
                            Description = "Crear nuevos registros en Toolbox Academy",
                            ModuleName = "ToolboxAcademy"
                        },
                        new
                        {
                            Id = 25,
                            ActionName = "Read",
                            Category = "Herramientas de Vida",
                            Description = "Ver y listar en Rueda de la Vida",
                            ModuleName = "WheelOfLife"
                        },
                        new
                        {
                            Id = 26,
                            ActionName = "Write",
                            Category = "Herramientas de Vida",
                            Description = "Editar y actualizar en Rueda de la Vida",
                            ModuleName = "WheelOfLife"
                        },
                        new
                        {
                            Id = 27,
                            ActionName = "Create",
                            Category = "Herramientas de Vida",
                            Description = "Crear nuevos registros en Rueda de la Vida",
                            ModuleName = "WheelOfLife"
                        },
                        new
                        {
                            Id = 28,
                            ActionName = "Read",
                            Category = "Herramientas de Vida",
                            Description = "Ver y listar en Rueda del Progreso",
                            ModuleName = "WheelOfProgress"
                        },
                        new
                        {
                            Id = 29,
                            ActionName = "Write",
                            Category = "Herramientas de Vida",
                            Description = "Editar y actualizar en Rueda del Progreso",
                            ModuleName = "WheelOfProgress"
                        },
                        new
                        {
                            Id = 30,
                            ActionName = "Create",
                            Category = "Herramientas de Vida",
                            Description = "Crear nuevos registros en Rueda del Progreso",
                            ModuleName = "WheelOfProgress"
                        },
                        new
                        {
                            Id = 31,
                            ActionName = "Read",
                            Category = "Herramientas de Vida",
                            Description = "Ver y listar en Rayos X de la Vida",
                            ModuleName = "XRayLife"
                        },
                        new
                        {
                            Id = 32,
                            ActionName = "Write",
                            Category = "Herramientas de Vida",
                            Description = "Editar y actualizar en Rayos X de la Vida",
                            ModuleName = "XRayLife"
                        },
                        new
                        {
                            Id = 33,
                            ActionName = "Create",
                            Category = "Herramientas de Vida",
                            Description = "Crear nuevos registros en Rayos X de la Vida",
                            ModuleName = "XRayLife"
                        },
                        new
                        {
                            Id = 34,
                            ActionName = "Read",
                            Category = "Herramientas de Vida",
                            Description = "Ver y listar en Evaluación de Vida",
                            ModuleName = "LifeAssessment"
                        },
                        new
                        {
                            Id = 35,
                            ActionName = "Write",
                            Category = "Herramientas de Vida",
                            Description = "Editar y actualizar en Evaluación de Vida",
                            ModuleName = "LifeAssessment"
                        },
                        new
                        {
                            Id = 36,
                            ActionName = "Create",
                            Category = "Herramientas de Vida",
                            Description = "Crear nuevos registros en Evaluación de Vida",
                            ModuleName = "LifeAssessment"
                        },
                        new
                        {
                            Id = 37,
                            ActionName = "Read",
                            Category = "Herramientas de Vida",
                            Description = "Ver y listar en Áreas de Vida",
                            ModuleName = "LifeAreas"
                        },
                        new
                        {
                            Id = 38,
                            ActionName = "Write",
                            Category = "Herramientas de Vida",
                            Description = "Editar y actualizar en Áreas de Vida",
                            ModuleName = "LifeAreas"
                        },
                        new
                        {
                            Id = 39,
                            ActionName = "Create",
                            Category = "Herramientas de Vida",
                            Description = "Crear nuevos registros en Áreas de Vida",
                            ModuleName = "LifeAreas"
                        },
                        new
                        {
                            Id = 40,
                            ActionName = "Read",
                            Category = "Productividad",
                            Description = "Ver y listar en Tareas",
                            ModuleName = "Tasks"
                        },
                        new
                        {
                            Id = 41,
                            ActionName = "Write",
                            Category = "Productividad",
                            Description = "Editar y actualizar en Tareas",
                            ModuleName = "Tasks"
                        },
                        new
                        {
                            Id = 42,
                            ActionName = "Create",
                            Category = "Productividad",
                            Description = "Crear nuevos registros en Tareas",
                            ModuleName = "Tasks"
                        },
                        new
                        {
                            Id = 43,
                            ActionName = "Read",
                            Category = "Productividad",
                            Description = "Ver y listar en Seguimiento de Hábitos",
                            ModuleName = "HabitTracker"
                        },
                        new
                        {
                            Id = 44,
                            ActionName = "Write",
                            Category = "Productividad",
                            Description = "Editar y actualizar en Seguimiento de Hábitos",
                            ModuleName = "HabitTracker"
                        },
                        new
                        {
                            Id = 45,
                            ActionName = "Create",
                            Category = "Productividad",
                            Description = "Crear nuevos registros en Seguimiento de Hábitos",
                            ModuleName = "HabitTracker"
                        },
                        new
                        {
                            Id = 46,
                            ActionName = "Read",
                            Category = "Configuración",
                            Description = "Ver y listar en Contenido de Emails",
                            ModuleName = "EmailContents"
                        },
                        new
                        {
                            Id = 47,
                            ActionName = "Write",
                            Category = "Configuración",
                            Description = "Editar y actualizar en Contenido de Emails",
                            ModuleName = "EmailContents"
                        },
                        new
                        {
                            Id = 48,
                            ActionName = "Create",
                            Category = "Configuración",
                            Description = "Crear nuevos registros en Contenido de Emails",
                            ModuleName = "EmailContents"
                        },
                        new
                        {
                            Id = 49,
                            ActionName = "Read",
                            Category = "Configuración",
                            Description = "Ver y listar en Configuración del Sitio",
                            ModuleName = "WebsiteSettings"
                        },
                        new
                        {
                            Id = 50,
                            ActionName = "Write",
                            Category = "Configuración",
                            Description = "Editar y actualizar en Configuración del Sitio",
                            ModuleName = "WebsiteSettings"
                        },
                        new
                        {
                            Id = 51,
                            ActionName = "Create",
                            Category = "Configuración",
                            Description = "Crear nuevos registros en Configuración del Sitio",
                            ModuleName = "WebsiteSettings"
                        },
                        new
                        {
                            Id = 52,
                            ActionName = "Read",
                            Category = "Configuración",
                            Description = "Ver y listar en Mensaje de Bienvenida",
                            ModuleName = "WelcomeMessage"
                        },
                        new
                        {
                            Id = 53,
                            ActionName = "Write",
                            Category = "Configuración",
                            Description = "Editar y actualizar en Mensaje de Bienvenida",
                            ModuleName = "WelcomeMessage"
                        },
                        new
                        {
                            Id = 54,
                            ActionName = "Create",
                            Category = "Configuración",
                            Description = "Crear nuevos registros en Mensaje de Bienvenida",
                            ModuleName = "WelcomeMessage"
                        });
                });

            modelBuilder.Entity("ToolBox.Models.ProgresoMetaUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaProgresoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaLimite")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Meta")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("PorcentajeProgreso")
                        .HasColumnType("integer");

                    b.Property<string>("SiguienteAccion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaProgresoId");

                    b.HasIndex("UserId", "CategoriaProgresoId")
                        .IsUnique();

                    b.ToTable("ProgresosMetasUsuarios");
                });

            modelBuilder.Entity("ToolBox.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LifeAreaId")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LifeAreaId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480),
                            LifeAreaId = 1,
                            QuestionText = "¿Cuál es mi propósito en la vida?",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480),
                            LifeAreaId = 1,
                            QuestionText = "¿Qué prácticas espirituales me conectan con mi ser interior?",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480),
                            LifeAreaId = 2,
                            QuestionText = "¿Qué hábitos de salud necesito mejorar?",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480),
                            LifeAreaId = 2,
                            QuestionText = "¿Cómo puedo mantener un equilibrio entre ejercicio y descanso?",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480),
                            LifeAreaId = 3,
                            QuestionText = "¿Cómo puedo fortalecer mis relaciones familiares?",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480),
                            LifeAreaId = 3,
                            QuestionText = "¿Qué amistades aportan valor a mi vida?",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480),
                            LifeAreaId = 4,
                            QuestionText = "¿Qué cualidades busco en una pareja?",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480),
                            LifeAreaId = 4,
                            QuestionText = "¿Cómo puedo mejorar mi comunicación en pareja?",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480),
                            LifeAreaId = 5,
                            QuestionText = "¿Mi trabajo actual se alinea con mi misión de vida?",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480),
                            LifeAreaId = 5,
                            QuestionText = "¿Qué habilidades necesito desarrollar para mi crecimiento profesional?",
                            UpdatedAt = new DateTime(2025, 5, 25, 14, 44, 52, 100, DateTimeKind.Utc).AddTicks(5480)
                        });
                });

            modelBuilder.Entity("ToolBox.Models.RegistroCumplimientoHabito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cumplido")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HabitoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HabitoId", "Fecha")
                        .IsUnique();

                    b.ToTable("RegistrosCumplimientoHabitos");
                });

            modelBuilder.Entity("ToolBox.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedDashboard")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ToolBox.Models.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("ToolBox.Models.Tarea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("EsImportante")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsUrgente")
                        .HasColumnType("boolean");

                    b.Property<bool>("EstaCompletada")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaCompletado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId", "FechaCreacion");

                    b.ToTable("Tareas");
                });

            modelBuilder.Entity("ToolBox.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("ToolBox.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("BillingMethod")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("StatusDetail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ToolBox.Models.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AnsweredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId", "QuestionId")
                        .IsUnique();

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("ToolBox.Models.WelcomeMessageSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionHTML")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UploadedVideoFileName")
                        .HasColumnType("text");

                    b.Property<string>("UploadedVideoPath")
                        .HasColumnType("text");

                    b.Property<string>("VideoType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WelcomeMessageSettings");
                });

            modelBuilder.Entity("ToolBox.Models.WheelOfLifeScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LifeAreaId")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LifeAreaId");

                    b.HasIndex("UserId", "LifeAreaId")
                        .IsUnique();

                    b.ToTable("WheelOfLifeScores");
                });

            modelBuilder.Entity("ToolBox.Models.CategoriaProgreso", b =>
                {
                    b.HasOne("ToolBox.Models.AreaProgreso", "AreaProgreso")
                        .WithMany("Categorias")
                        .HasForeignKey("AreaProgresoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaProgreso");
                });

            modelBuilder.Entity("ToolBox.Models.Habito", b =>
                {
                    b.HasOne("ToolBox.Models.CategoriaHabito", "CategoriaHabito")
                        .WithMany("Habitos")
                        .HasForeignKey("CategoriaHabitoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ToolBox.Models.FrecuenciaHabito", "FrecuenciaHabito")
                        .WithMany("Habitos")
                        .HasForeignKey("FrecuenciaHabitoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ToolBox.Models.User", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriaHabito");

                    b.Navigation("FrecuenciaHabito");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ToolBox.Models.LifeArea", b =>
                {
                    b.HasOne("ToolBox.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("ToolBox.Models.ProgresoMetaUsuario", b =>
                {
                    b.HasOne("ToolBox.Models.CategoriaProgreso", "CategoriaProgreso")
                        .WithMany("ProgresosUsuarios")
                        .HasForeignKey("CategoriaProgresoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriaProgreso");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToolBox.Models.Question", b =>
                {
                    b.HasOne("ToolBox.Models.LifeArea", "LifeArea")
                        .WithMany()
                        .HasForeignKey("LifeAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LifeArea");
                });

            modelBuilder.Entity("ToolBox.Models.RegistroCumplimientoHabito", b =>
                {
                    b.HasOne("ToolBox.Models.Habito", "Habito")
                        .WithMany("RegistrosCumplimiento")
                        .HasForeignKey("HabitoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Habito");
                });

            modelBuilder.Entity("ToolBox.Models.RolePermission", b =>
                {
                    b.HasOne("ToolBox.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ToolBox.Models.Tarea", b =>
                {
                    b.HasOne("ToolBox.Models.User", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ToolBox.Models.Topic", b =>
                {
                    b.HasOne("ToolBox.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("ToolBox.Models.User", b =>
                {
                    b.HasOne("ToolBox.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ToolBox.Models.UserAnswer", b =>
                {
                    b.HasOne("ToolBox.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToolBox.Models.WheelOfLifeScore", b =>
                {
                    b.HasOne("ToolBox.Models.LifeArea", "LifeArea")
                        .WithMany()
                        .HasForeignKey("LifeAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LifeArea");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToolBox.Models.AreaProgreso", b =>
                {
                    b.Navigation("Categorias");
                });

            modelBuilder.Entity("ToolBox.Models.CategoriaHabito", b =>
                {
                    b.Navigation("Habitos");
                });

            modelBuilder.Entity("ToolBox.Models.CategoriaProgreso", b =>
                {
                    b.Navigation("ProgresosUsuarios");
                });

            modelBuilder.Entity("ToolBox.Models.FrecuenciaHabito", b =>
                {
                    b.Navigation("Habitos");
                });

            modelBuilder.Entity("ToolBox.Models.Habito", b =>
                {
                    b.Navigation("RegistrosCumplimiento");
                });

            modelBuilder.Entity("ToolBox.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ToolBox.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
